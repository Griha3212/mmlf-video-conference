[{"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx":"1","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx":"3","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts":"4","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts":"5","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx":"6","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts":"7","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts":"8","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts":"9","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx":"10","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\LoadingPage\\LoadingPage.tsx":"11","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\LoadingPage\\style.ts":"12","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts":"13","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx":"14","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts":"15","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx":"16","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts":"17","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx":"18","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts":"19","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\indexTheme.ts":"20","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx":"21","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts":"22","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx":"23","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts":"24","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\ModeratorCard\\ModeratorCard.tsx":"25","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\ModeratorCard\\style.ts":"26","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts":"27","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts":"28","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx":"29","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts":"30","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx":"31","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts":"32","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts":"33"},{"size":545,"mtime":1611566003512,"results":"34","hashOfConfig":"35"},{"size":436,"mtime":1609149080634,"results":"36","hashOfConfig":"35"},{"size":999,"mtime":1611219535180,"results":"37","hashOfConfig":"35"},{"size":88,"mtime":1609151476043,"results":"38","hashOfConfig":"35"},{"size":254,"mtime":1609941695606,"results":"39","hashOfConfig":"35"},{"size":4843,"mtime":1610437764729,"results":"40","hashOfConfig":"35"},{"size":845,"mtime":1609924589133,"results":"41","hashOfConfig":"35"},{"size":433,"mtime":1609754100539,"results":"42","hashOfConfig":"35"},{"size":596,"mtime":1611219984263,"results":"43","hashOfConfig":"35"},{"size":2980,"mtime":1611092216226,"results":"44","hashOfConfig":"35"},{"size":455,"mtime":1609923543629,"results":"45","hashOfConfig":"35"},{"size":304,"mtime":1609923543632,"results":"46","hashOfConfig":"35"},{"size":368,"mtime":1609937434279,"results":"47","hashOfConfig":"35"},{"size":7098,"mtime":1611562544240,"results":"48","hashOfConfig":"35"},{"size":1287,"mtime":1611562566718,"results":"49","hashOfConfig":"35"},{"size":360,"mtime":1609927664710,"results":"50","hashOfConfig":"35"},{"size":474,"mtime":1609927609396,"results":"51","hashOfConfig":"35"},{"size":22234,"mtime":1611346369969,"results":"52","hashOfConfig":"35"},{"size":8430,"mtime":1611382345024,"results":"53","hashOfConfig":"35"},{"size":752,"mtime":1610469885795,"results":"54","hashOfConfig":"35"},{"size":1088,"mtime":1611078096440,"results":"55","hashOfConfig":"35"},{"size":304,"mtime":1610521474487,"results":"56","hashOfConfig":"35"},{"size":7496,"mtime":1611345698893,"results":"57","hashOfConfig":"35"},{"size":7871,"mtime":1611564098679,"results":"58","hashOfConfig":"35"},{"size":804,"mtime":1610544223943,"results":"59","hashOfConfig":"35"},{"size":304,"mtime":1610534492141,"results":"60","hashOfConfig":"35"},{"size":3122,"mtime":1611213301102,"results":"61","hashOfConfig":"35"},{"size":1257,"mtime":1611561293120,"results":"62","hashOfConfig":"35"},{"size":16151,"mtime":1611381176665,"results":"63","hashOfConfig":"35"},{"size":6168,"mtime":1611380873975,"results":"64","hashOfConfig":"35"},{"size":7038,"mtime":1611247105532,"results":"65","hashOfConfig":"35"},{"size":1409,"mtime":1611245672776,"results":"66","hashOfConfig":"35"},{"size":551,"mtime":1611219982410,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vtgqsx",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"73"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"73"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"73"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"73"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"73"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"73"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"73"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"73"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"73"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"73"},"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx",["153","154"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\reportWebVitals.ts",["155"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",["156","157","158","159","160","161"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts",["162"],"const getLocalStorageData = (): any => {\n  const accessToken = localStorage.getItem('token');\n  const refreshToken = localStorage.getItem('refreshToken');\n\n  return {\n    token: { accessToken, refreshToken },\n  };\n};\n\nexport default getLocalStorageData;\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx",["163","164","165","166"],"import React, {\n  FC, memo, useState,\n  ChangeEvent,\n} from 'react';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useForm, Controller } from 'react-hook-form';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  useLocation, Prompt, useHistory,\n} from 'react-router-dom';\nimport useStyles from './style';\nimport { apiLogin } from '../../api/login';\n\ntype FormData = {\n  loginCode: string;\n};\n\ninterface Props {\n  onSubmit: (data: FormData) => void;\n\n}\n\nfunction Alert(props: any) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst LoginPage: FC = () => {\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError]: [string, (error: string) => void] = useState('');\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  const {\n    handleSubmit,\n    control, errors: fieldsErrors,\n  } = useForm<FormData>();\n  const onSubmit = async (data: FormData) => {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n    }\n    const response = await apiLogin(data.loginCode);\n\n    if (response && response.status === 404) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 400) {\n      setError('Ошибка');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (!response) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 500) {\n      setError(`${response.data}`);\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n    if (response && response.token && response.refreshToken) {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      setSuccess(true);\n      setLoading(false);\n      history.push('/user');\n    }\n  };\n\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    await setOpen(false);\n  };\n\n  return (\n\n    <Container component=\"main\" maxWidth=\"xs\">\n\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Вход\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            name=\"loginCode\"\n            as={(\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                id=\"loginCode\"\n                label=\"Полученный код\"\n                autoFocus\n              // error={!!fieldsErrors.loginCode?.message}\n              // helperText={fieldsErrors.loginCode ? fieldsErrors.loginCode.message : null}\n              />\n            )}\n            control={control}\n            defaultValue=\"\"\n            rules={{\n              required: 'Введите пожалуйста код',\n              // pattern: {\n              //   value: /^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]+$/i,\n              //   message: 'Incorrect value',\n              // },\n            }}\n          />\n          {fieldsErrors.loginCode && <Typography variant=\"caption\" color=\"error\">{fieldsErrors.loginCode.message}</Typography>}\n          <div className={classes.wrapper}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              // className={classes.submit}\n              className={buttonClassname}\n              disabled={loading}\n            >\n              Войти\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n          </div>\n        </form>\n      </div>\n    </Container>\n\n  );\n};\n\nexport default memo(LoginPage);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts",["167"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\n// Login\nexport const apiLogin = async (\n  loginCode: string,\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.login}`;\n\n  try {\n    const { data } = await axios.post(url, { loginCode });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx",["168","169","170","171","172","173","174"],"import React, {\r\n  FC, memo, useEffect, useState,\r\n} from 'react';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport AdminPage from '../Admin/AdminPage';\r\n\r\nimport LoadingPage from '../../components/LoadingPage/LoadingPage';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport { parseToken } from '../../utils/parseToken';\r\nimport LoginPage from '../Login/LoginPage';\r\nimport UserPage from '../User/UserPage';\r\n\r\ninterface UserData {\r\n  isAdmin: boolean;\r\n}\r\n\r\nexport const ProtectedRoutes: FC = () => {\r\n  const [isAuth, setIsAuth] = useState(!!getLocalStorageData().token.accessToken);\r\n  if (!isAuth) return <Redirect to=\"/signin\" />;\r\n  const { token } = getLocalStorageData();\r\n\r\n  const [userData, setUserData] = useState(parseToken(token.accessToken as string));\r\n\r\n  // const loadUserInfoFromLocalStorage = async () => {\r\n  //   if (token.accessToken && token.refreshToken) {\r\n  //     setUserData(parseToken(token.accessToken as string));\r\n  //     console.log('here admin :>> ');\r\n  //     console.log('userData', parseToken(token.accessToken as string));\r\n  //     setIsAuth(true);\r\n  //   } else {\r\n  //     setIsAuth(false);\r\n  //   }\r\n  // };\r\n\r\n  // loadUserInfoFromLocalStorage();\r\n\r\n  // useEffect(() => {\r\n  //   loadUserInfoFromLocalStorage();\r\n\r\n  //   // if (token.accessToken && token.refreshToken) {\r\n  //   //   setUserData(parseToken(token.accessToken as string));\r\n  //   //   console.log('here admin :>> ');\r\n  //   //   console.log('userData', userData);\r\n  //   //   setIsAuth(true);\r\n  //   // } else {\r\n  //   //   setIsAuth(false);\r\n  //   // }\r\n  // }, []);\r\n\r\n  console.log('userData ProtectedRoutes :>> ', userData);\r\n\r\n  // // if (!isAdmin) return <Redirect to=\"/signin\" />;\r\n  if (userData.isAdmin) return <Redirect to=\"/admin\" />;\r\n  if (userData.hasAccessToStatisticPage) return <Redirect to=\"/stats\" />;\r\n  if (!userData.isAdmin) return <Redirect to=\"/user\" />;\r\n\r\n  // if (isAuth && !userData?.isAdmin) return <Redirect to=\"/user\" />;\r\n  // if (isAuth && userData?.isAdmin) return <Redirect to=\"/admin\" />;\r\n\r\n  //   return (\r\n  //     <Route\r\n  //       {...rest}\r\n  //       render={props =>\r\n  //         isLoggedIn ? (\r\n  //           <Component {...props} />\r\n  //         ) : (\r\n  //             <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n  //           )\r\n  //       }\r\n  //     />\r\n  //   )\r\n  // }\r\n\r\n  return (\r\n\r\n    <ContentContainer>\r\n      <Switch>\r\n        {(!userData?.isAdmin) && <Route path=\"/user\" component={UserPage} />}\r\n        {(userData?.isAdmin) && <Route path=\"/admin\" component={AdminPage} />}\r\n      </Switch>\r\n    </ContentContainer>\r\n  );\r\n\r\n  // return (\r\n\r\n  //   <Switch>\r\n  //     {(userData && userData.isAdmin) && <Route path=\"/admin\" component={AdminPage} />}\r\n  //   </Switch>\r\n\r\n  // );\r\n};\r\n\r\nexport default memo(ProtectedRoutes);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\LoadingPage\\LoadingPage.tsx",[],["175","176","177","178","179","180"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\LoadingPage\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts",["181"],"export const parseToken = (token: string) => {\r\n  const base64Url = token.split('.')[1];\r\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  const jsonPayload = JSON.parse(decodeURIComponent(atob(base64).split('').map((c) => `%${(`00${c.charCodeAt(0).toString(16)}`).slice(-2)}`).join('')));\r\n  return jsonPayload;\r\n};\r\n\r\nexport default parseToken;\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx",["182"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n  ChangeEvent,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport useStyles from './style';\r\nimport { apiGetUser } from '../../api/user';\r\nimport parseToken from '../../utils/parseToken';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport { apiChangeActiveSpeakerInChannel, apiSetBrakeInChannel } from '../../api/admin';\r\n\r\ntype Speaker = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n};\r\n\r\ntype DataForAdmin = {\r\n  // channelAdminInfo: {\r\n  //   break: boolean, id: number, link: string,\r\n  //   number: number\r\n  // },\r\n  // description: string;\r\n  // id: number;\r\n  // letter: string;\r\n  // name: string;\r\n  // speakers: Array<Speaker>\r\n\r\n  channelAdminInfo: {\r\n    number: number,\r\n  }\r\n\r\n  foundAllSessionsInAdminChannel: Array<Session>\r\n\r\n};\r\n\r\nfunction Alert(props: any) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ntype Session = {\r\n\r\n  description: string;\r\n  id: number;\r\n  letter: string;\r\n  name: string;\r\n  nextSessionDescription: string;\r\n  nextSessionLetter: string;\r\n  speakers: Array<Speaker>;\r\n  voteFoAllSession: boolean;\r\n\r\n};\r\n\r\nconst AdminPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [error]: [string, (error: string) => void] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [activeSpeaker, setActiveSpeaker] = useState('');\r\n\r\n  const [selectedSpeakerToActivate, setSelectedSpeakerToActivate] = useState('');\r\n\r\n  const [dataForAdmin, setDataForAdmin] = useState<DataForAdmin>();\r\n  const [activeButtonId, setActiveButtonId] = useState<number | undefined>();\r\n\r\n  const loadDataForAdmin = async () => {\r\n    const response = await apiGetUser(userData.id, token);\r\n    setDataForAdmin(response);\r\n\r\n    if (response && response.channelAdminInfo && response.channelAdminInfo.activeSpeaker) {\r\n      setActiveSpeaker(`${response.channelAdminInfo.activeSpeaker.lastName} ${response.channelAdminInfo.activeSpeaker.firstName}`);\r\n      setActiveButtonId(response.channelAdminInfo.activeSpeaker.id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForAdmin();\r\n  }, []);\r\n\r\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    await setOpen(false);\r\n  };\r\n\r\n  const activateSelectedSpeaker = async (speakerId: string) => {\r\n    const response = await apiChangeActiveSpeakerInChannel(\r\n      token,\r\n      Number(speakerId),\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n    );\r\n\r\n    setActiveSpeaker(`${response.lastName} ${response.firstName}`);\r\n  };\r\n\r\n  const setBreakBetweenSessions = async () => {\r\n    await apiSetBrakeInChannel(\r\n      token,\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n      Number(activeButtonId),\r\n    );\r\n    setActiveSpeaker('');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const renderSpeakersDataForAdmin = (element: Speaker) => {\r\n    if (!element.isModerator) {\r\n      return (\r\n\r\n        <Grid container xs={12} justify=\"center\">\r\n          <Button\r\n            onClick={(e) => {\r\n              setSelectedSpeakerToActivate(e.currentTarget.value);\r\n              setActiveButtonId(Number(e.currentTarget.value));\r\n            }}\r\n            value={element.id}\r\n            data-id=\"\"\r\n            className={activeButtonId === element.id ?\r\n              classes.speakerButtonActive : classes.speakerButton}\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n          >\r\n            {`${element.lastName}  ${element.firstName}`}\r\n          </Button>\r\n        </Grid>\r\n\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n        <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Администратора\r\n          </Typography>\r\n          <p className={classes.sessionLetter}>\r\n            Канал №\r\n            {dataForAdmin && String(dataForAdmin.channelAdminInfo.number)}\r\n          </p>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <Grid container justify=\"space-around\">\r\n\r\n        <Grid item xs={4}>\r\n\r\n          {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (session: Session) => (\r\n                <>\r\n                  <p className={classes.sessionLetter}>\r\n                    {session.letter}\r\n                  </p>\r\n                  <p>\r\n                    {session.speakers.map(\r\n                      (speaker: Speaker) => renderSpeakersDataForAdmin(speaker),\r\n                    )}\r\n                  </p>\r\n                </>\r\n              ),\r\n            )\r\n          }\r\n\r\n          {/* {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (element: Session) => renderSpeakersDataForAdmin(element),\r\n            )\r\n          } */}\r\n        </Grid>\r\n\r\n        <Grid item justify=\"center\" xs={4}>\r\n          <p className={`${classes.textCenter} ${classes.activateSelectedSpeakerP}`}>\r\n            <Button onClick={() => activateSelectedSpeaker(selectedSpeakerToActivate)} variant=\"contained\" color=\"primary\">Активировать выбранного спикера</Button>\r\n          </p>\r\n\r\n          <p className={classes.textCenter}>\r\n            <Button onClick={() => setBreakBetweenSessions()} variant=\"contained\" color=\"primary\">Активировать перерыв</Button>\r\n          </p>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <p className={classes.activeSpeakerText}>\r\n            Активный спикер:\r\n            {' '}\r\n            {`${activeSpeaker}`}\r\n          </p>\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(AdminPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx",["183"],"import React, { FC } from 'react';\r\nimport { Hidden } from '@material-ui/core';\r\nimport useStyles from './style';\r\n\r\nexport const ContentContainer: FC = ({ children }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n\r\n      <div className={classes.container}>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentContainer;\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx",["184","185","186","187","188","189","190","191","192"],"/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable no-nested-ternary */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable no-lone-blocks */\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n} from 'react';\r\nimport {\r\n  useMediaQuery, Grid, Typography, Button, Hidden,\r\n} from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport useStyles from './style';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport parseToken from '../../utils/parseToken';\r\nimport VideoPlayerMain from '../../components/VideoPlayerMain/VideoPlayerMain';\r\nimport SessionInfoBlock from '../../components/SessionInfoBlock/SessionInfoBlock';\r\nimport topMMLFLogo from '../../img/mmlfLogo2021.svg';\r\nimport SpeakersSessionInfoBlock from '../../components/SpeakersSessionInfoBlock/SpeakersSessionInfoBlock';\r\nimport {\r\n  apiGetUser, apiUserUpdateWatchedSpeakers,\r\n  apiGetAllChannels, apiUserChangeActiveChannel, apiUserUpdateWatchedSpeakersAllInSession,\r\n} from '../../api/user';\r\nimport lerua from '../../img/partnersImg/lerua.svg';\r\nimport severstal from '../../img/partnersImg/severstal.svg';\r\nimport cocalCola from '../../img/partnersImg/coca-cola.svg';\r\nimport footerMMLFLogo from '../../img/footerMMLFLogo.svg';\r\nimport vk from '../../img/socialImg/vk.svg';\r\nimport facebook from '../../img/socialImg/facebook.svg';\r\nimport youtube from '../../img/socialImg/youtube.svg';\r\nimport cclFooter from '../../img/ccl_footer.svg';\r\n\r\ntype DataForUser = {\r\n  channelUserInfo: {\r\n    break: boolean, id: number, link: string,\r\n    number: number,\r\n    activeSession: {\r\n      voteFoAllSession: boolean,\r\n      name: string,\r\n      id: number,\r\n    },\r\n  },\r\n\r\n  channelForShowing: {\r\n    break: boolean, id: number, link: string,\r\n    number: number\r\n  },\r\n  description: string;\r\n  id: number;\r\n  letter: string;\r\n  name: string;\r\n  speakers: Array<Speaker>\r\n\r\n  foundUser: {\r\n    votes: Array<Vote>\r\n    id: number;\r\n    showOtherChannelsBlock: boolean\r\n  }\r\n\r\n};\r\n\r\ntype Vote = {\r\n\r\n  createdAt: Date;\r\n  id: number;\r\n  rate: number;\r\n  speaker: Speaker\r\n\r\n};\r\n\r\ntype Speaker = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n};\r\n\r\ntype Channel = {\r\n\r\n  break: boolean, id: number, link: string,\r\n  number: number\r\n\r\n};\r\n\r\nconst socket = io(`${process.env.REACT_APP_API_URL}`);\r\n\r\nconst UserPage: FC = () => {\r\n  const [isAuth] = useState(!!getLocalStorageData().token.accessToken);\r\n  if (!isAuth) return <Redirect to=\"/signin\" />;\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  if (userData.isAdmin) {\r\n    return <Redirect to=\"/admin\" />;\r\n  }\r\n\r\n  if (userData.hasAccessToStatisticPage) {\r\n    return <Redirect to=\"/stats\" />;\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  const [user] = useState(parseToken(token.accessToken as string));\r\n  const history = useHistory();\r\n\r\n  const [dataForUser, setDataForUser] = React.useState<DataForUser>();\r\n\r\n  // active session info\r\n  const [activeSessionLetter, setActiveSessionLetter] = React.useState<DataForUser>();\r\n  const [activeSessionDescription, setActiveSessionDescription] = React.useState<DataForUser>();\r\n\r\n  // active speaker info\r\n  const [activeSpeakerInfo, setActiveSpeakerInfo] = React.useState<DataForUser>();\r\n  const [activeSpeakerRate, setActiveSessionSpeakersRate] = React.useState<number>();\r\n\r\n  // active moderator info\r\n  const [activeModeratorInfo, setActiveModeratorInfo] = React.useState<DataForUser>();\r\n\r\n  // active session speakers info\r\n  const [activeSessionSpeakersInfo, setActiveSessionSpeakersInfo] = React.useState<DataForUser>();\r\n  const [activeSessionSpeakersAllRates, setActiveSessionSpeakersAllRates]\r\n    = React.useState<Vote[]>();\r\n\r\n  // all channels info\r\n\r\n  const [allChannelsInfo, setAllChannelsInfo] = React.useState<Channel[]>();\r\n  // const isVisible = usePageVisibility();\r\n\r\n  // console.log('isVisible :>> ', isVisible);\r\n\r\n  // will start hook again if user will be changed\r\n  useEffect(() => {\r\n    socket.emit('connectToPersonalRoom', user.id);\r\n  }, []);\r\n\r\n  // on reconnect of socket\r\n  useEffect(() => {\r\n    socket.on('giveMeConnectionInfo', () => {\r\n      // connect to personalRoom\r\n      socket.emit('connectToPersonalRoom', user.id);\r\n      // connect to channelRoom\r\n      socket.emit('connectToChannelRoom', user.activeChannel);\r\n    });\r\n    return () => {\r\n      socket.off('giveMeConnectionInfo');\r\n    };\r\n  }, []);\r\n\r\n  const findAndSetCurrentSpeakerRate = (votes: Vote[] | undefined) => {\r\n    if (activeSpeakerInfo && votes) {\r\n      const currentSpeakerRate2 = votes.find((element: Vote) => element.speaker.id\r\n        === activeSpeakerInfo.id);\r\n\r\n      setActiveSessionSpeakersRate(currentSpeakerRate2 && currentSpeakerRate2.rate);\r\n    }\r\n  };\r\n\r\n  const loadDataForUser = async () => {\r\n    const response = await apiGetUser(userData.id, token);\r\n    setDataForUser(response);\r\n\r\n    const response2 = await apiGetAllChannels(userData.id, token);\r\n    setAllChannelsInfo(response2);\r\n\r\n    if (response) {\r\n      setActiveSessionLetter(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession && response.channelUserInfo.activeSession.letter);\r\n\r\n      setActiveSessionDescription(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession\r\n        && response.channelUserInfo.activeSession.description);\r\n\r\n      setActiveSpeakerInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSpeaker);\r\n\r\n      setActiveModeratorInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession &&\r\n        response.channelUserInfo.activeSession.speakers.find(\r\n          (element: any) => element.isModerator,\r\n        ));\r\n\r\n      setActiveSessionSpeakersInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession\r\n        && response.channelUserInfo.activeSession.speakers);\r\n\r\n      socket.emit('connectToChannelRoom', response.foundUser.activeChannel);\r\n    }\r\n  };\r\n\r\n  const updateWatchedSpeakersSingleSpeaker = async (speakerId: number) => {\r\n    await apiUserUpdateWatchedSpeakers(speakerId, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  const updateWatchedSpeakersAllSpeakersInSession = async (sessionId: number) => {\r\n    await apiUserUpdateWatchedSpeakersAllInSession(sessionId, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  // watch timer functional\r\n\r\n  // if there is active speaker, update timer every seconds,\r\n  // until 10, then speaker status set to viewed\r\n  // if type of session voteForAllSession another logic\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // count for single speaker\r\n      if (activeSpeakerInfo && dataForUser &&\r\n        !dataForUser.channelUserInfo.activeSession.voteFoAllSession) {\r\n        let initialValueCurrentSpeaker = localStorage.getItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`);\r\n\r\n        if (!initialValueCurrentSpeaker) {\r\n          localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, '0');\r\n        } else {\r\n          if (initialValueCurrentSpeaker !== 'viewed') {\r\n            if (initialValueCurrentSpeaker === '5') {\r\n              localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, 'viewed');\r\n              // send to back viewed status\r\n              updateWatchedSpeakersSingleSpeaker(activeSpeakerInfo.id);\r\n            } else {\r\n              initialValueCurrentSpeaker = String(+initialValueCurrentSpeaker + 1);\r\n              localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, initialValueCurrentSpeaker);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // count for complete session\r\n      if (activeSpeakerInfo && dataForUser &&\r\n        dataForUser.channelUserInfo.activeSession.voteFoAllSession) {\r\n        let initialValueCurrentSession = localStorage.getItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`);\r\n\r\n        if (!initialValueCurrentSession) {\r\n          localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, '0');\r\n        } else {\r\n          if (initialValueCurrentSession !== 'viewed') {\r\n            if (initialValueCurrentSession === '5') {\r\n              localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, 'viewed');\r\n              // send to back viewed status\r\n              updateWatchedSpeakersAllSpeakersInSession(\r\n                dataForUser.channelUserInfo.activeSession.id,\r\n              );\r\n            } else {\r\n              initialValueCurrentSession = String(+initialValueCurrentSession + 1);\r\n              localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, initialValueCurrentSession);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [activeSpeakerInfo]);\r\n\r\n  useEffect(() => {\r\n    socket.on('connectToPersonalRoom', (data: any) => {\r\n      if (data.message === 'disconnect current user') {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        history.push('/');\r\n      }\r\n\r\n      if (data.message === 'update current speakers votes') {\r\n        loadDataForUser();\r\n        setActiveSessionSpeakersAllRates(data.votes);\r\n      }\r\n    });\r\n    return () => {\r\n      socket.off('connectToPersonalRoom');\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.on('connectToChannelRoom', (data: any) => {\r\n      setActiveSpeakerInfo(data.updatedSpeaker);\r\n      loadDataForUser();\r\n\r\n      if (data.message === 'update') {\r\n        loadDataForUser();\r\n        // setActiveSessionSpeakersAllRates(data.votes);\r\n      }\r\n    });\r\n    return () => {\r\n      socket.off('connectToChannelRoom');\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadDataForUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // loadDataForUser();\r\n    findAndSetCurrentSpeakerRate(dataForUser && dataForUser.foundUser.votes);\r\n    setActiveSessionSpeakersAllRates(dataForUser && dataForUser.foundUser.votes);\r\n  }, [activeSpeakerInfo]);\r\n\r\n  // const sendLoginDataToServer =\r\n\r\n  const changeActiveChannel = async (channelNumber: number) => {\r\n    await apiUserChangeActiveChannel(channelNumber, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  const renderSessionLetterOfTheSessionInChannel = (channel: any) => {\r\n    if (channel) {\r\n      if (!channel.activeSession && channel.break) {\r\n        return channel.startChannelSessionLetter;\r\n      }\r\n\r\n      if (channel.activeSession && channel.break) {\r\n        return channel.activeSession.nextSessionLetter;\r\n      }\r\n\r\n      if (channel.activeSession.letter) {\r\n        return channel.activeSession.letter;\r\n      } else return 'Сессия #';\r\n    } else return 'Сессия #';\r\n  };\r\n\r\n  const renderSessionDescriptionOfTheSessionInChannel = (channel: any) => {\r\n    if (channel) {\r\n      if (!channel.activeSession && channel.break) {\r\n        return channel.startChannelSessionDescription;\r\n      }\r\n\r\n      if (channel.activeSession && channel.break) {\r\n        return channel.activeSession.nextSessionDescription;\r\n      }\r\n\r\n      if (channel.activeSession.description) {\r\n        return channel.activeSession.description;\r\n      } else return 'Назавание сессии';\r\n    } else return 'Назавание сессии';\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const isXl = useMediaQuery(theme.breakpoints.up('xl'));\r\n  const isLg = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const isMd = useMediaQuery(theme.breakpoints.up('md'));\r\n  const isSm = useMediaQuery(theme.breakpoints.up('sm'));\r\n  const isXs = useMediaQuery(theme.breakpoints.up('xs'));\r\n\r\n  const calculateHeightOfSmallChannelWindow = () => {\r\n    if (isXl) return '290px';\r\n    if (isLg) return '193px';\r\n    if (isXs) return '227px';\r\n  };\r\n\r\n  const renderOtherSessions = (channel: any) => {\r\n    if (channel.number !== dataForUser!.channelUserInfo.number) {\r\n      return (\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.channelContainer}\r\n            id={channel.number}\r\n            onClick={(e) => changeActiveChannel(+e.currentTarget.id)}\r\n          >\r\n\r\n            <VideoPlayerMain height={calculateHeightOfSmallChannelWindow()} classNameInner=\"channelVideoContainer\" videoURL={channel.link} />\r\n\r\n            <Grid item xs={12} className={classes.channelContainerBottomPart}>\r\n\r\n              <p className={classes.chooseChannelSessionLetter}>\r\n                {renderSessionLetterOfTheSessionInChannel(channel)}\r\n              </p>\r\n              <p className={classes.chooseChannelSessionDescription}>\r\n                {renderSessionDescriptionOfTheSessionInChannel(channel)}\r\n              </p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* header pc */}\r\n      <Hidden xsDown>\r\n        <Grid\r\n          container\r\n          xl={12}\r\n          justify=\"space-between\"\r\n          className={`${classes.mainContainer} ${classes.darkBlueBckgTop} ${classes.topPart}`}\r\n        >\r\n\r\n          <Grid item className={classes.myAuto} lg={3} xl={3} sm={12}>\r\n            <img\r\n              onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n              className={classes.mmlfTopLogoImg}\r\n              src={topMMLFLogo}\r\n              alt=\"\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} xl={6} lg={6} sm={12}>\r\n            <Typography className={classes.conferenceTopText} align=\"center\">Конференция</Typography>\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} xl={3} lg={3} sm={12}>\r\n            <Button\r\n              onClick={() => { window.open('https://www.mmlf.ru/programma-mmlf-2021.html', '_blank'); }}\r\n              className={classes.loadProgramButton}\r\n            >\r\n              Скачать программу\r\n            </Button>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Hidden>\r\n\r\n      {/* header mobile */}\r\n      <Hidden only={['sm', 'lg', 'xl', 'md']}>\r\n        <Grid\r\n          container\r\n          xl={12}\r\n          justify=\"space-between\"\r\n          className={`${classes.mainContainer} ${classes.darkBlueBckgTop} ${classes.topPart}`}\r\n        >\r\n\r\n          <Grid item className={classes.myAuto} xs={6}>\r\n            <p style={{ marginBottom: '0px' }}>\r\n              <img\r\n                onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n                className={classes.mmlfTopLogoImg}\r\n                src={topMMLFLogo}\r\n                alt=\"\"\r\n              />\r\n\r\n            </p>\r\n            <p style={{ marginTop: '5px' }}><Typography className={classes.conferenceTopText} align=\"center\">Конференция</Typography></p>\r\n\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} xl={3} sm={12} xs={6}>\r\n            <Button\r\n              onClick={() => { window.open('https://www.mmlf.ru/programma-mmlf-2021.html', '_blank'); }}\r\n              className={classes.loadProgramButton}\r\n            >\r\n              Скачать программу\r\n            </Button>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Hidden>\r\n\r\n      <Grid container className={classes.mainVideoContainer} xl justify=\"center\">\r\n\r\n        <VideoPlayerMain\r\n          height=\"720px\"\r\n          classNameInner=\"mainVideoContainerBig\"\r\n          videoURL={dataForUser && dataForUser.channelUserInfo.link}\r\n        />\r\n\r\n      </Grid>\r\n\r\n      <Grid className={classes.redBckgContainer} container item justify=\"center\" />\r\n\r\n      {/* first block (active speaker) info ---------------------------*/}\r\n      <Grid item className={classes.innerContainer} justify=\"center\">\r\n        <SessionInfoBlock\r\n          currentSessionLetter={activeSessionLetter}\r\n          currentSessionDescription={activeSessionDescription}\r\n          currentSpeakerInfo={activeSpeakerInfo}\r\n          token={token}\r\n          userId={user.id}\r\n          currentSpeakerRate={activeSpeakerRate}\r\n          currentUserData={dataForUser}\r\n          key={dataForUser}\r\n        />\r\n\r\n      </Grid>\r\n      {/* block with all speakers in session--------------------------------------------------- */}\r\n      <Grid item className={classes.innerContainer} justify=\"center\">\r\n\r\n        <SpeakersSessionInfoBlock\r\n          currentModeratorInfo={activeModeratorInfo}\r\n          currentSessionSpeakersInfo={activeSessionSpeakersInfo}\r\n          currentSessionSpeakersAllRates={activeSessionSpeakersAllRates}\r\n          currentUserData={dataForUser}\r\n          token={token}\r\n          userId={user.id}\r\n          key={activeSessionSpeakersAllRates}\r\n        />\r\n\r\n      </Grid>\r\n      {/* show/hide OtherChannelsBlock-------------------------------------------------------- */}\r\n      {dataForUser && dataForUser.foundUser.showOtherChannelsBlock ? (\r\n        <Grid container className={classes.changeSessionMainContainer} xl>\r\n\r\n          <Grid item className={classes.innerContainer}>\r\n            <Grid xs={12} item container className={`${classes.mainContainerBckgChangeSession} ${classes.mainContainerBckgChangeSessionFirst}`}>\r\n              <p className={classes.speakersBlockHeader}>Сменить сессию</p>\r\n            </Grid>\r\n\r\n            <Grid xs={12} item justify=\"space-between\" container className={classes.mainContainerBckgChangeSession}>\r\n              {allChannelsInfo && dataForUser\r\n                && allChannelsInfo.map((element) => renderOtherSessions(element))}\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n      ) : null}\r\n\r\n      <Grid container className={classes.partnersContainer} justify=\"space-around\">\r\n\r\n        <Grid item className={classes.innerContainer}>\r\n          <Grid xs={12} item container className={classes.mainContainerBckgChangeSession}>\r\n            <p className={`${classes.speakersBlockHeader} ${classes.partnersHeader}`}>Партнеры сессии</p>\r\n          </Grid>\r\n\r\n          <Grid justify=\"space-between\" container item className={`${classes.mainContainerBckgChangeSession} ${classes.partnersContainerImg}`}>\r\n            <Grid className={classes.myAuto} item xs={8} xl={3} lg={3}>\r\n\r\n              <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={lerua} alt=\"\" />\r\n\r\n            </Grid>\r\n\r\n            <Grid className={classes.myAuto} item xs={8} xl={3} lg={3}>\r\n\r\n              <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={severstal} alt=\"\" />\r\n\r\n            </Grid>\r\n\r\n            <Grid className={classes.myAuto} item xs={8} xl={3} lg={3}>\r\n\r\n              <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={cocalCola} alt=\"\" />\r\n\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* footer--------------------------------------------------------------------------- */}\r\n      <Grid container>\r\n\r\n        <Grid item container justify=\"space-around\" className={classes.footerContainer}>\r\n\r\n          <Grid justify=\"space-between\" container item className={classes.footerContainerInner}>\r\n\r\n            <Grid xs={12} xl={3} lg={3} className={`${classes.myAuto} ${classes.footerLogoContainer}`} item>\r\n              <img\r\n                onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n                className={`${classes.cursorPointer} ${classes.mmlfFooterLogo}`}\r\n                src={footerMMLFLogo}\r\n                alt=\"\"\r\n              />\r\n\r\n            </Grid>\r\n            <Grid xs={12} xl={3} lg={3} className={classes.myAuto} item>\r\n              <p className={classes.footerTextDate}>15-19 февраля 2021</p>\r\n            </Grid>\r\n            <Grid xs={8} xl={2} lg={2} className={classes.myAuto} item>\r\n              <Grid container item justify=\"space-around\">\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://vk.com/ccl_logistics', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={vk}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://www.facebook.com/logcouncil/', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={facebook}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://www.youtube.com/channel/UCtWoEZ_O5QBtBQHg4Z5OM2A', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={youtube}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n\r\n              </Grid>\r\n\r\n            </Grid>\r\n            <Grid xs={12} xl={3} lg={3} className={`${classes.myAuto} ${classes.footerLogoAndPhone}`} item>\r\n              <p>\r\n                <img\r\n                  onClick={() => { window.open('https://ccl-logistics.ru/', '_blank'); }}\r\n                  className={classes.cursorPointer}\r\n                  src={cclFooter}\r\n                  alt=\"\"\r\n                />\r\n\r\n              </p>\r\n              <p><a className={classes.bottomLink} href=\"tel:+7 (495) 763-91-95\">+7 (495) 763-91-95</a></p>\r\n\r\n            </Grid>\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(UserPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\indexTheme.ts",["193"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx",["194","195","196","197","198","199","200","201"],"import React, { memo, useState } from 'react';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport Iframe from 'react-iframe';\nimport { createPortal } from 'react-dom';\nimport useStyles from './style';\n\nconst VideoPlayerMain = (props: any) => {\n  const classes = useStyles();\n\n  const [contentRef, setContentRef] = useState(null);\n  const mountNode = contentRef;\n  const inputRef: any = React.useRef<HTMLInputElement>(null); // note the passed in `null` arg\n\n  const playVideo = (): any => {\n\n  };\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      data-testid=\"loading-page\"\n    >\n      <div\n        className={props.classNameInner}\n        ref={inputRef}\n      >\n        <Iframe\n          // test url https://facecast.net/v/pybh3r?nolabel&noanimation&autorun=true&t=30\n          url={props.videoURL}\n          width=\"100%\"\n          height={props.height}\n          position=\"relative\"\n          allow=\"fullscreen\"\n          onLoad={playVideo()}\n        />\n      </div>\n    </Grid>\n\n  );\n};\n\nexport default memo(VideoPlayerMain);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts",[],["202","203","204","205","206","207"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx",["208"],"/* eslint-disable no-lone-blocks */\nimport React, { memo, useEffect } from 'react';\nimport {\n  Grid, Typography, Button,\n} from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Rating from '@material-ui/lab/Rating';\nimport useStyles from './style';\nimport noAvatar from '../../img/speakersImg/noAvatar.svg';\nimport { apiVoteForSpeaker } from '../../api/user';\n\nconst SessionInfoBlock = (props: any) => {\n  const {\n    currentSpeakerInfo, currentSpeakerRate, currentUserData,\n  } = props;\n\n  const classes = useStyles();\n  const [rate, setRate] = React.useState<number | null>(currentSpeakerRate || 0);\n  const [closedAccess, setClosedAccess] = React.useState(true);\n\n  // check timers logic-----------------------------------------------\n  useEffect(() => {\n    setRate(currentSpeakerRate);\n  }, [currentSpeakerRate]);\n\n  useEffect(() => {\n    setClosedAccess(true);\n\n    const currentSpeakerLocalStorageData = localStorage.getItem(\n      `${String(currentSpeakerInfo && currentSpeakerInfo.id)}`,\n    );\n\n    if (currentSpeakerLocalStorageData === 'viewed') {\n      setClosedAccess(false);\n    }\n  }, [currentSpeakerInfo]);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     if (isVisible) {\n  //       if (currentSpeakerInfo) {\n  //         const currentSpeakerLocalStorageData = localStorage.getItem(\n  //           `${String(currentSpeakerInfo && currentSpeakerInfo.id)}`,\n  //         );\n\n  //         if (currentSpeakerLocalStorageData === 'viewed') {\n  //           setClosedAccess(false);\n  //         } else {\n  //           setClosedAccess(true);\n  //         }\n  //       }\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(interval);\n  // }, [currentSpeakerInfo]);\n\n  //-------------------------------------------------------------------\n\n  const sendVoteForSpeaker = async (rateDirectlyFromUI: number | null) => {\n    await apiVoteForSpeaker(\n      props.currentSpeakerInfo.id,\n      props.userId,\n      props.token,\n      rateDirectlyFromUI,\n    );\n  };\n\n  const renderSessionLetter = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return currentUserData.channelUserInfo.startChannelSessionLetter;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return currentUserData.channelUserInfo.activeSession.nextSessionLetter;\n      }\n\n      if (props.currentSessionLetter) {\n        return props.currentSessionLetter;\n      } else return 'Сессия #';\n    } else return 'Сессия #';\n  };\n\n  const renderSessionDescription = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return `Перерыв... Скоро здесь начнётся сессия: ${currentUserData.channelUserInfo.startChannelSessionDescription}`;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return `Перерыв... Скоро здесь начнётся сессия: ${currentUserData.channelUserInfo.activeSession.nextSessionDescription}`;\n      }\n\n      if (props.currentSessionDescription) {\n        return props.currentSessionDescription;\n      } else return 'Сессия #';\n    } else return 'Сессия #';\n  };\n\n  const showSecondBlock = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession) {\n        return true;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession &&\n        !currentUserData.channelUserInfo.activeSession.voteFoAllSession) {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <>\n\n      <Grid item container className={classes.darkBlueBckg}>\n        <Grid item xs={12}>\n          <p className={renderSessionLetter().length > 10\n            ? classes.sessionLetterTextLong : classes.sessionLetterText}\n          >\n            {renderSessionLetter()}\n          </p>\n\n        </Grid>\n\n        <p className={classes.sessionNameText}>\n          {renderSessionDescription()}\n        </p>\n\n      </Grid>\n\n      {showSecondBlock() ? (\n        <Grid item container justify=\"space-between\" className={classes.lightBlueBckg}>\n\n          <Grid item className={classes.speakerInfoBlock} xl={8} lg={8} xs={12}>\n            <p className={classes.speakerTheme}>\n              {currentSpeakerInfo && currentSpeakerInfo.topicName || 'Тема доклада'}\n            </p>\n\n            <Grid container spacing={5}>\n\n              <Grid item xs={4} xl={2} lg={2}>\n                <img className={classes.speakerAvatarImg} width=\"100%\" src={currentSpeakerInfo && currentSpeakerInfo.linkToImg || noAvatar} alt=\"\" />\n\n              </Grid>\n              <Grid className={classes.noLeftPadding} item xs={8} xl={8} lg={8}>\n                <p className={classes.speakerHeaderText}>Спикер</p>\n                <p className={classes.speakerFullNameText}>\n                  {`${currentSpeakerInfo\n                    && currentSpeakerInfo.lastName || 'ФАМИЛИЯ'} ${currentSpeakerInfo\n                    && currentSpeakerInfo.firstName || 'Имя'}`}\n\n                </p>\n                <p className={classes.speakerFullCompanyText}>\n                  {`${currentSpeakerInfo\n                    && currentSpeakerInfo.company || 'Компания'}, ${currentSpeakerInfo\n                    && currentSpeakerInfo.statusInCompany || 'должность'}`}\n                </p>\n              </Grid>\n            </Grid>\n\n          </Grid>\n\n          <Grid alignItems=\"center\" alignContent=\"center\" xs={12} lg={3} xl={3}>\n\n            <p className={classes.textCenter}>\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                <Typography className={classes.rateSpeakerText} component=\"legend\">Оцените выступление</Typography>\n                <Rating\n                  classes={{ iconEmpty: 'rateBigDefault' }}\n                  className={classes.rateSpeakerStarsImg}\n                  name=\"simple-controlled\"\n                  value={rate}\n                  disabled={closedAccess}\n                  onChange={async (event, newValue) => {\n                    setRate(newValue);\n                    sendVoteForSpeaker(newValue);\n                  }}\n                />\n              </Box>\n            </p>\n\n            <p className={classes.textCenter}>\n              <Button\n                disabled={closedAccess}\n                onClick={() => window.open(`${currentSpeakerInfo && currentSpeakerInfo.linkToPresentation}`, '_blank')}\n                className={classes.loadPresenationButton}\n              >\n                Скачать презентацию\n\n              </Button>\n            </p>\n\n            {\n              currentSpeakerInfo && currentSpeakerInfo.linkToZoom ? (\n                <p className={classes.textCenter}>\n                  <Button\n                    disabled={closedAccess}\n                    onClick={() => window.open(`${currentSpeakerInfo && currentSpeakerInfo.linkToZoom}`, '_blank')}\n                    className={classes.goToZoomButton}\n                  >\n                    Перейти в Zoom\n\n                  </Button>\n                </p>\n              ) : null\n            }\n\n          </Grid>\n\n        </Grid>\n      )\n        : null}\n\n    </>\n  );\n};\n\nexport default memo(SessionInfoBlock);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\ModeratorCard\\ModeratorCard.tsx",["209","210","211","212","213","214","215","216","217","218"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\ModeratorCard\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts",["219","220","221","222","223","224"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\n// Login\nexport const apiGetUser = async (\n  userId: string,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getUser}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiVoteForSpeaker = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  rate: number | null,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.voteForSpeaker}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId, rate }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakers = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakers}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakersAllInSession = async (\n  sessionId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakersAll}`;\n\n  try {\n    const { data } = await axios.post(url, { sessionId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiGetAllChannels = async (\n  userId: string,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getAllChannels}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserChangeActiveChannel = async (\n  channelNumber: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelNumber, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts",["225","226"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\nexport const apiChangeActiveSpeakerInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  speakerIdToActivate: number,\n  channelForShowingNumber: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveSpeakerInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerIdToActivate, channelForShowingNumber }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiSetBrakeInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  channelForShowingNumber: number,\n  prevSpeakerid: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.setBrakeInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelForShowingNumber, prevSpeakerid }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx",["227","228","229","230","231","232","233"],"/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\nimport React, { memo, useEffect } from 'react';\r\nimport {\r\n  Grid, Hidden,\r\n} from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Rating from '@material-ui/lab/Rating';\r\n// import { useEffect } from 'react';\r\nimport useStyles from './style';\r\nimport noAvatar from '../../img/speakersImg/noAvatar.svg';\r\nimport PDF from '../../img/pdf_icon.svg';\r\nimport Zoom from '../../img/zoomfondo-blanco-vertical-seeklogo.svg';\r\nimport PDFDisabled from '../../img/pdf_icon_black_and_white.svg';\r\nimport ZoomDisabled from '../../img/zoomfondo_black_and_white.svg';\r\nimport { apiVoteForSpeaker } from '../../api/user';\r\n\r\ntype Vote = {\r\n\r\n  createdAt: Date;\r\n  id: number;\r\n  rate: number;\r\n  speaker: Speaker\r\n\r\n};\r\n\r\ntype Speaker = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n};\r\n\r\nconst SpeakersSessionInfoBlock = (props: any) => {\r\n  const classes = useStyles();\r\n  const [value] = React.useState<number | null>(5);\r\n\r\n  const {\r\n    currentModeratorInfo,\r\n    currentSessionSpeakersInfo,\r\n    currentSessionSpeakersAllRates,\r\n    currentUserData,\r\n\r\n  } = props;\r\n\r\n  const [currentSessionSpeakersAllRatesState,\r\n    setCurrentSessionSpeakersAllRatesState] =\r\n    React.useState<Vote[]>(currentSessionSpeakersAllRates);\r\n\r\n  useEffect(() => {\r\n    setCurrentSessionSpeakersAllRatesState(currentSessionSpeakersAllRates);\r\n  }, [currentSessionSpeakersAllRates]);\r\n\r\n  const checkIsWatched = (speakerId: number) => {\r\n    if (currentUserData && currentUserData.foundUser && currentUserData.foundUser.watchedSpeakers) {\r\n      const foundWtchedSpeaker = currentUserData.foundUser.watchedSpeakers.find(\r\n        (speaker: any) => speaker.id === speakerId,\r\n      );\r\n\r\n      if (foundWtchedSpeaker) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } else return true;\r\n  };\r\n\r\n  const renderSpeakersRates = (element: any) => {\r\n    if (currentSessionSpeakersAllRatesState) {\r\n      if (currentSessionSpeakersAllRatesState!.length > 0) {\r\n        const foundRate = currentSessionSpeakersAllRatesState!.find(\r\n          (vote: any) => vote.speaker.id === element.id,\r\n        );\r\n\r\n        if (foundRate) {\r\n          return foundRate.rate;\r\n        } else return 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderMockedSessionSpeakers = () => (\r\n    <>\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n        <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n          <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n        </p>\r\n        <p className={classes.speakerNameInsideSession}>ФАМИЛИЯ</p>\r\n        <p className={classes.speakerNameInsideSession}>Имя</p>\r\n        <p className={classes.textCenter}>\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n          </Box>\r\n\r\n        </p>\r\n\r\n        <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n            <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n\r\n  const sendVoteForSpeaker = async (\r\n    rateDirectlyFromUI: number | null,\r\n    currentSpeakerId: number,\r\n  ) => {\r\n    await apiVoteForSpeaker(\r\n      currentSpeakerId,\r\n      props.userId,\r\n      props.token,\r\n      rateDirectlyFromUI,\r\n    );\r\n  };\r\n\r\n  const renderSessionSpeakers = () => (\r\n\r\n    currentSessionSpeakersInfo.map((element: any) => {\r\n      if (!element.isModerator) {\r\n        return (\r\n          <>\r\n            <Grid className={classes.singleSpeakerBlock} xs={12} lg={2} xl={2} item>\r\n\r\n              <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n                <img className={classes.speakerAvatarInsideSession} src={element.linkToImg} alt=\"\" />\r\n              </p>\r\n              <p className={classes.speakerNameInsideSession}>{element.lastName}</p>\r\n              <p className={classes.speakerNameInsideSession}>{element.firstName}</p>\r\n              <p className={classes.textCenter}>\r\n                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                  <Rating\r\n                    id={element.id}\r\n                    classes={{ iconEmpty: 'rateSmallDefault' }}\r\n                    className={classes.smallScoreStarImg}\r\n                    name={element.id}\r\n                    disabled={checkIsWatched(element.id)}\r\n                    value={renderSpeakersRates(element) || 0}\r\n                    readOnly={checkIsWatched(element.id)}\r\n                    onChange={async (name, newValue) => {\r\n                      sendVoteForSpeaker(newValue, +element.id);\r\n                    }}\r\n                  />\r\n                </Box>\r\n\r\n              </p>\r\n\r\n              <Grid xs={6} lg={10} xl={10} container className={classes.mxAuto} justify=\"space-around\">\r\n                <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n                  <img\r\n                    className={checkIsWatched(element.id) ? `${classes.loadPDFImg} ${classes.disabledImg}`\r\n                      : `${classes.pointerImg} ${classes.loadPDFImg}`}\r\n                    src={checkIsWatched(element.id) ? PDFDisabled : PDF}\r\n                    onClick={() => window.open(`${element.linkToPresentation}`, '_blank')}\r\n                    alt=\"\"\r\n                  />\r\n\r\n                </Grid>\r\n\r\n                {\r\n                  element.linkToZoom ? (\r\n                    <Grid className={classes.zoomPdfIconsItem} item>\r\n\r\n                      <img\r\n                        src={checkIsWatched(element.id) ? ZoomDisabled : Zoom}\r\n                        className={\r\n                          checkIsWatched(element.id) ? `${classes.loadZoomImg} ${classes.disabledImg}`\r\n                            : `${classes.pointerImg} ${classes.loadZoomImg}`\r\n                        }\r\n                        onClick={() => window.open(`${element.linkToZoom}`, '_blank')}\r\n                        alt=\"\"\r\n                      />\r\n\r\n                    </Grid>\r\n                  ) : null\r\n                }\r\n\r\n              </Grid>\r\n\r\n            </Grid>\r\n          </>\r\n        );\r\n      }\r\n    })\r\n  );\r\n\r\n  const renderSpeakers = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return renderMockedSessionSpeakers();\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return renderMockedSessionSpeakers();\r\n      }\r\n\r\n      if (props.currentSessionSpeakersInfo) {\r\n        return renderSessionSpeakers();\r\n      } else renderMockedSessionSpeakers();\r\n    } else renderMockedSessionSpeakers();\r\n  };\r\n\r\n  const renderModeratorImgSrc = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return noAvatar;\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return noAvatar;\r\n      }\r\n\r\n      if (currentModeratorInfo) {\r\n        return currentModeratorInfo.linkToImg;\r\n      } else return noAvatar;\r\n    } else return noAvatar;\r\n  };\r\n\r\n  const renderModeratorFullName = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return 'ФАМИЛИЯ Имя';\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return 'ФАМИЛИЯ Имя';\r\n      }\r\n\r\n      if (currentModeratorInfo) {\r\n        return `${currentModeratorInfo.lastName} ${currentModeratorInfo.firstName}`;\r\n      } else return 'ФАМИЛИЯ Имя';\r\n    } else return 'ФАМИЛИЯ Имя';\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      <Grid xs={12} item container className={classes.mainContainerBckg}>\r\n        {/* mobile */}\r\n        <Hidden only={['sm', 'lg', 'xl', 'md']}>\r\n          <Grid justify=\"space-around\" item className={classes.moderatorContainerInfoBlock} container xs={12} lg={4} xl={4}>\r\n\r\n            <Grid item xs={4} xl={3}>\r\n              <img width=\"100%\" src={renderModeratorImgSrc()} alt=\"\" />\r\n\r\n            </Grid>\r\n            <Grid className={classes.moderatorInfoBlock} item xs={6} xl={8} lg={8}>\r\n\r\n              <p className={classes.moderatorHeaderText}>Модератор</p>\r\n              <p className={classes.moderatorFullName}>{renderModeratorFullName()}</p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid item xs={12} lg={8} xl={8}>\r\n          <p className={classes.speakersBlockHeader}>Спикеры сессии</p>\r\n        </Grid>\r\n        <Hidden xsDown>\r\n          <Grid justify=\"space-between\" item className={classes.moderatorContainerInfoBlock} container xs={4} lg={4} xl={4}>\r\n\r\n            <Grid item xs={3} xl={3}>\r\n              <img width=\"100%\" src={renderModeratorImgSrc()} alt=\"\" />\r\n\r\n            </Grid>\r\n            <Grid className={classes.moderatorInfoBlock} item xs={8} xl={8} lg={8}>\r\n\r\n              <p className={classes.moderatorHeaderText}>Модератор</p>\r\n              <p className={classes.moderatorFullName}>{renderModeratorFullName()}</p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid className={classes.sessionSpeakersBlock} justify=\"space-around\" container xs={12}>\r\n\r\n          {\r\n            renderSpeakers()\r\n          }\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(SpeakersSessionInfoBlock);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx",["234","235","236"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { apiGetStats } from '../../api/stats';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport parseToken from '../../utils/parseToken';\r\nimport useStyles from './style';\r\n\r\ntype User = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  lastName: string;\r\n\r\n};\r\n\r\ntype Vote = {\r\n  rate: number;\r\n  user: User;\r\n  createdAt: Date;\r\n};\r\n\r\ntype DataForStats = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n  usersWhoWatchedSpeaker: Array<User>;\r\n  votes: Array<Vote>;\r\n\r\n};\r\n\r\nconst StatsPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [dataForStatsViewer, setDataForStatsViewer] = useState<DataForStats[]>();\r\n\r\n  const loadDataForStatsViewer = async () => {\r\n    const response = await apiGetStats(userData.id, token);\r\n    setDataForStatsViewer(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForStatsViewer();\r\n  }, []);\r\n\r\n  const Row = (props: { row: DataForStats }) => {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    let sum = 0;\r\n\r\n    row.votes.map((element) => {\r\n      sum += element.rate;\r\n    });\r\n\r\n    const medianValue = (+sum / +row.votes.length || 0).toFixed(2);\r\n\r\n    const renderRate = (historyRow: any) => {\r\n      const currentRate = row && row!.votes.find(\r\n        (element: any) => element.user.id === historyRow.id,\r\n      );\r\n\r\n      if (currentRate && currentRate.createdAt && !currentRate.rate) return '0';\r\n      return currentRate && currentRate.rate || 'без оценки';\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <TableRow className={classes.root}>\r\n          <TableCell align=\"center\">\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n            {`${row.firstName} ${row.lastName}`}\r\n          </TableCell>\r\n          <TableCell align=\"center\">{row.usersWhoWatchedSpeaker.length}</TableCell>\r\n          <TableCell align=\"center\">{row.votes.length}</TableCell>\r\n          <TableCell align=\"center\">{medianValue}</TableCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  Подробнее\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\">Имя Фамилия участника</TableCell>\r\n                      <TableCell align=\"center\">Просмотрел</TableCell>\r\n                      <TableCell align=\"center\">Оценка</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {row.usersWhoWatchedSpeaker.map((historyRow) => (\r\n                      <TableRow key={historyRow.id}>\r\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                          {`${historyRow.firstName} ${historyRow.lastName}`}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Checkbox\r\n                            defaultChecked\r\n                            color=\"primary\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{renderRate(historyRow)}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className={classes.pageNameContainer} component=\"main\" maxWidth=\"xs\">\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Просмотра Статистики\r\n          </Typography>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <div className={classes.root}>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell />\r\n                <TableCell align=\"center\">Имя Фамилия спикера</TableCell>\r\n                <TableCell align=\"center\">Количество просмотров</TableCell>\r\n                <TableCell align=\"center\">Количество оценок</TableCell>\r\n                <TableCell align=\"center\">Средняя оценка</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {dataForStatsViewer && dataForStatsViewer.map((row) => (\r\n                <Row key={row.id} row={row} />\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(StatsPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts",["237"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n\nexport const apiGetStats = async (\n  userId: string,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getStats}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n",{"ruleId":"238","severity":1,"message":"239","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":23},{"ruleId":"238","severity":1,"message":"242","line":7,"column":10,"nodeType":"240","messageId":"241","endLine":7,"endColumn":15},{"ruleId":"243","severity":1,"message":"244","line":3,"column":25,"nodeType":"245","messageId":"246","endLine":3,"endColumn":57},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":1,"column":33,"nodeType":"261","messageId":"262","endLine":1,"endColumn":36,"suggestions":"263"},{"ruleId":"238","severity":1,"message":"264","line":19,"column":3,"nodeType":"240","messageId":"241","endLine":19,"endColumn":14},{"ruleId":"238","severity":1,"message":"265","line":19,"column":16,"nodeType":"240","messageId":"241","endLine":19,"endColumn":22},{"ruleId":"238","severity":1,"message":"266","line":28,"column":11,"nodeType":"240","messageId":"241","endLine":28,"endColumn":16},{"ruleId":"259","severity":1,"message":"260","line":33,"column":23,"nodeType":"261","messageId":"262","endLine":33,"endColumn":26,"suggestions":"267"},{"ruleId":"259","severity":1,"message":"260","line":10,"column":12,"nodeType":"261","messageId":"262","endLine":10,"endColumn":15,"suggestions":"268"},{"ruleId":"238","severity":1,"message":"269","line":2,"column":13,"nodeType":"240","messageId":"241","endLine":2,"endColumn":22},{"ruleId":"238","severity":1,"message":"270","line":11,"column":8,"nodeType":"240","messageId":"241","endLine":11,"endColumn":19},{"ruleId":"238","severity":1,"message":"271","line":16,"column":8,"nodeType":"240","messageId":"241","endLine":16,"endColumn":17},{"ruleId":"238","severity":1,"message":"272","line":19,"column":11,"nodeType":"240","messageId":"241","endLine":19,"endColumn":19},{"ruleId":"238","severity":1,"message":"273","line":24,"column":18,"nodeType":"240","messageId":"241","endLine":24,"endColumn":27},{"ruleId":"238","severity":1,"message":"274","line":28,"column":20,"nodeType":"240","messageId":"241","endLine":28,"endColumn":31},{"ruleId":"275","severity":1,"message":"276","line":56,"column":3,"nodeType":"277","messageId":"278","endLine":56,"endColumn":14},{"ruleId":"247","replacedBy":"279"},{"ruleId":"249","replacedBy":"280"},{"ruleId":"251","replacedBy":"281"},{"ruleId":"253","replacedBy":"282"},{"ruleId":"255","replacedBy":"283"},{"ruleId":"257","replacedBy":"284"},{"ruleId":"243","severity":1,"message":"244","line":1,"column":27,"nodeType":"245","messageId":"246","endLine":1,"endColumn":51},{"ruleId":"259","severity":1,"message":"260","line":60,"column":23,"nodeType":"261","messageId":"262","endLine":60,"endColumn":26,"suggestions":"285"},{"ruleId":"238","severity":1,"message":"286","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":16},{"ruleId":"259","severity":1,"message":"260","line":193,"column":21,"nodeType":"261","messageId":"262","endLine":193,"endColumn":24,"suggestions":"287"},{"ruleId":"259","severity":1,"message":"260","line":269,"column":47,"nodeType":"261","messageId":"262","endLine":269,"endColumn":50,"suggestions":"288"},{"ruleId":"259","severity":1,"message":"260","line":287,"column":46,"nodeType":"261","messageId":"262","endLine":287,"endColumn":49,"suggestions":"289"},{"ruleId":"259","severity":1,"message":"260","line":318,"column":62,"nodeType":"261","messageId":"262","endLine":318,"endColumn":65,"suggestions":"290"},{"ruleId":"259","severity":1,"message":"260","line":334,"column":67,"nodeType":"261","messageId":"262","endLine":334,"endColumn":70,"suggestions":"291"},{"ruleId":"238","severity":1,"message":"292","line":353,"column":9,"nodeType":"240","messageId":"241","endLine":353,"endColumn":13},{"ruleId":"238","severity":1,"message":"293","line":354,"column":9,"nodeType":"240","messageId":"241","endLine":354,"endColumn":13},{"ruleId":"259","severity":1,"message":"260","line":363,"column":41,"nodeType":"261","messageId":"262","endLine":363,"endColumn":44,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":364,"column":28,"nodeType":"297","messageId":"298","endLine":364,"endColumn":40,"suggestions":"299"},{"ruleId":"238","severity":1,"message":"300","line":15,"column":9,"nodeType":"240","messageId":"241","endLine":15,"endColumn":20},{"ruleId":"238","severity":1,"message":"301","line":2,"column":16,"nodeType":"240","messageId":"241","endLine":2,"endColumn":32},{"ruleId":"238","severity":1,"message":"302","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":22},{"ruleId":"259","severity":1,"message":"260","line":7,"column":33,"nodeType":"261","messageId":"262","endLine":7,"endColumn":36,"suggestions":"303"},{"ruleId":"238","severity":1,"message":"304","line":8,"column":9,"nodeType":"240","messageId":"241","endLine":8,"endColumn":16},{"ruleId":"238","severity":1,"message":"305","line":10,"column":22,"nodeType":"240","messageId":"241","endLine":10,"endColumn":35},{"ruleId":"238","severity":1,"message":"306","line":11,"column":9,"nodeType":"240","messageId":"241","endLine":11,"endColumn":18},{"ruleId":"259","severity":1,"message":"260","line":12,"column":19,"nodeType":"261","messageId":"262","endLine":12,"endColumn":22,"suggestions":"307"},{"ruleId":"259","severity":1,"message":"260","line":14,"column":25,"nodeType":"261","messageId":"262","endLine":14,"endColumn":28,"suggestions":"308"},{"ruleId":"247","replacedBy":"309"},{"ruleId":"249","replacedBy":"310"},{"ruleId":"251","replacedBy":"311"},{"ruleId":"253","replacedBy":"312"},{"ruleId":"255","replacedBy":"313"},{"ruleId":"257","replacedBy":"314"},{"ruleId":"259","severity":1,"message":"260","line":12,"column":34,"nodeType":"261","messageId":"262","endLine":12,"endColumn":37,"suggestions":"315"},{"ruleId":"238","severity":1,"message":"301","line":3,"column":9,"nodeType":"240","messageId":"241","endLine":3,"endColumn":25},{"ruleId":"238","severity":1,"message":"316","line":3,"column":27,"nodeType":"240","messageId":"241","endLine":3,"endColumn":37},{"ruleId":"238","severity":1,"message":"317","line":3,"column":39,"nodeType":"240","messageId":"241","endLine":3,"endColumn":45},{"ruleId":"238","severity":1,"message":"318","line":5,"column":8,"nodeType":"240","messageId":"241","endLine":5,"endColumn":14},{"ruleId":"238","severity":1,"message":"319","line":6,"column":8,"nodeType":"240","messageId":"241","endLine":6,"endColumn":11},{"ruleId":"238","severity":1,"message":"320","line":7,"column":8,"nodeType":"240","messageId":"241","endLine":7,"endColumn":14},{"ruleId":"238","severity":1,"message":"321","line":8,"column":8,"nodeType":"240","messageId":"241","endLine":8,"endColumn":15},{"ruleId":"238","severity":1,"message":"322","line":10,"column":8,"nodeType":"240","messageId":"241","endLine":10,"endColumn":23},{"ruleId":"259","severity":1,"message":"260","line":12,"column":31,"nodeType":"261","messageId":"262","endLine":12,"endColumn":34,"suggestions":"323"},{"ruleId":"238","severity":1,"message":"304","line":13,"column":9,"nodeType":"240","messageId":"241","endLine":13,"endColumn":16},{"ruleId":"259","severity":1,"message":"260","line":14,"column":12,"nodeType":"261","messageId":"262","endLine":14,"endColumn":15,"suggestions":"324"},{"ruleId":"259","severity":1,"message":"260","line":37,"column":12,"nodeType":"261","messageId":"262","endLine":37,"endColumn":15,"suggestions":"325"},{"ruleId":"259","severity":1,"message":"260","line":59,"column":12,"nodeType":"261","messageId":"262","endLine":59,"endColumn":15,"suggestions":"326"},{"ruleId":"259","severity":1,"message":"260","line":81,"column":12,"nodeType":"261","messageId":"262","endLine":81,"endColumn":15,"suggestions":"327"},{"ruleId":"259","severity":1,"message":"260","line":103,"column":12,"nodeType":"261","messageId":"262","endLine":103,"endColumn":15,"suggestions":"328"},{"ruleId":"259","severity":1,"message":"260","line":125,"column":12,"nodeType":"261","messageId":"262","endLine":125,"endColumn":15,"suggestions":"329"},{"ruleId":"259","severity":1,"message":"260","line":13,"column":12,"nodeType":"261","messageId":"262","endLine":13,"endColumn":15,"suggestions":"330"},{"ruleId":"259","severity":1,"message":"260","line":35,"column":12,"nodeType":"261","messageId":"262","endLine":35,"endColumn":15,"suggestions":"331"},{"ruleId":"259","severity":1,"message":"260","line":44,"column":42,"nodeType":"261","messageId":"262","endLine":44,"endColumn":45,"suggestions":"332"},{"ruleId":"259","severity":1,"message":"260","line":67,"column":19,"nodeType":"261","messageId":"262","endLine":67,"endColumn":22,"suggestions":"333"},{"ruleId":"259","severity":1,"message":"260","line":78,"column":41,"nodeType":"261","messageId":"262","endLine":78,"endColumn":44,"suggestions":"334"},{"ruleId":"295","severity":1,"message":"296","line":80,"column":11,"nodeType":"297","messageId":"298","endLine":80,"endColumn":47,"suggestions":"335"},{"ruleId":"295","severity":1,"message":"296","line":81,"column":27,"nodeType":"297","messageId":"298","endLine":81,"endColumn":63,"suggestions":"336"},{"ruleId":"259","severity":1,"message":"260","line":82,"column":18,"nodeType":"261","messageId":"262","endLine":82,"endColumn":21,"suggestions":"337"},{"ruleId":"259","severity":1,"message":"260","line":297,"column":46,"nodeType":"261","messageId":"262","endLine":297,"endColumn":49,"suggestions":"338"},{"ruleId":"259","severity":1,"message":"260","line":96,"column":37,"nodeType":"261","messageId":"262","endLine":96,"endColumn":40,"suggestions":"339"},{"ruleId":"295","severity":1,"message":"296","line":97,"column":34,"nodeType":"297","messageId":"298","endLine":97,"endColumn":38,"suggestions":"340"},{"ruleId":"259","severity":1,"message":"260","line":98,"column":19,"nodeType":"261","messageId":"262","endLine":98,"endColumn":22,"suggestions":"341"},{"ruleId":"259","severity":1,"message":"260","line":12,"column":12,"nodeType":"261","messageId":"262","endLine":12,"endColumn":15,"suggestions":"342"},"@typescript-eslint/no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'theme' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","lines-around-directive",["343"],"no-spaced-func",["344"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["345","346"],"'useLocation' is defined but never used.","'Prompt' is defined but never used.","'Props' is defined but never used.",["347","348"],["349","350"],"'useEffect' is defined but never used.","'LoadingPage' is defined but never used.","'LoginPage' is defined but never used.","'UserData' is defined but never used.","'setIsAuth' is assigned a value but never used.","'setUserData' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected",["343"],["344"],[],[],[],[],["351","352"],"'Hidden' is defined but never used.",["353","354"],["355","356"],["357","358"],["359","360"],["361","362"],"'isMd' is assigned a value but never used.","'isSm' is assigned a value but never used.",["363","364"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["365"],"'breakpoints' is assigned a value but never used.","'CircularProgress' is defined but never used.","'createPortal' is defined but never used.",["366","367"],"'classes' is assigned a value but never used.","'setContentRef' is assigned a value but never used.","'mountNode' is assigned a value but never used.",["368","369"],["370","371"],["343"],["344"],[],[],[],[],["372","373"],"'Typography' is defined but never used.","'Button' is defined but never used.","'Iframe' is defined but never used.","'Box' is defined but never used.","'Rating' is defined but never used.","'Divider' is defined but never used.","'VideoPlayerMain' is defined but never used.",["374","375"],["376","377"],["378","379"],["380","381"],["382","383"],["384","385"],["386","387"],["388","389"],["390","391"],["392","393"],["394","395"],["396","397"],["398"],["399"],["400","401"],["402","403"],["404","405"],["406"],["407","408"],["409","410"],"padding-line-between-statements","func-call-spacing",{"messageId":"411","fix":"412","desc":"413"},{"messageId":"414","fix":"415","desc":"416"},{"messageId":"411","fix":"417","desc":"413"},{"messageId":"414","fix":"418","desc":"416"},{"messageId":"411","fix":"419","desc":"413"},{"messageId":"414","fix":"420","desc":"416"},{"messageId":"411","fix":"421","desc":"413"},{"messageId":"414","fix":"422","desc":"416"},{"messageId":"411","fix":"423","desc":"413"},{"messageId":"414","fix":"424","desc":"416"},{"messageId":"411","fix":"425","desc":"413"},{"messageId":"414","fix":"426","desc":"416"},{"messageId":"411","fix":"427","desc":"413"},{"messageId":"414","fix":"428","desc":"416"},{"messageId":"411","fix":"429","desc":"413"},{"messageId":"414","fix":"430","desc":"416"},{"messageId":"411","fix":"431","desc":"413"},{"messageId":"414","fix":"432","desc":"416"},{"messageId":"411","fix":"433","desc":"413"},{"messageId":"414","fix":"434","desc":"416"},{"messageId":"435","fix":"436","desc":"437"},{"messageId":"411","fix":"438","desc":"413"},{"messageId":"414","fix":"439","desc":"416"},{"messageId":"411","fix":"440","desc":"413"},{"messageId":"414","fix":"441","desc":"416"},{"messageId":"411","fix":"442","desc":"413"},{"messageId":"414","fix":"443","desc":"416"},{"messageId":"411","fix":"444","desc":"413"},{"messageId":"414","fix":"445","desc":"416"},{"messageId":"411","fix":"446","desc":"413"},{"messageId":"414","fix":"447","desc":"416"},{"messageId":"411","fix":"448","desc":"413"},{"messageId":"414","fix":"449","desc":"416"},{"messageId":"411","fix":"450","desc":"413"},{"messageId":"414","fix":"451","desc":"416"},{"messageId":"411","fix":"452","desc":"413"},{"messageId":"414","fix":"453","desc":"416"},{"messageId":"411","fix":"454","desc":"413"},{"messageId":"414","fix":"455","desc":"416"},{"messageId":"411","fix":"456","desc":"413"},{"messageId":"414","fix":"457","desc":"416"},{"messageId":"411","fix":"458","desc":"413"},{"messageId":"414","fix":"459","desc":"416"},{"messageId":"411","fix":"460","desc":"413"},{"messageId":"414","fix":"461","desc":"416"},{"messageId":"411","fix":"462","desc":"413"},{"messageId":"414","fix":"463","desc":"416"},{"messageId":"411","fix":"464","desc":"413"},{"messageId":"414","fix":"465","desc":"416"},{"messageId":"411","fix":"466","desc":"413"},{"messageId":"414","fix":"467","desc":"416"},{"messageId":"411","fix":"468","desc":"413"},{"messageId":"414","fix":"469","desc":"416"},{"messageId":"435","fix":"470","desc":"437"},{"messageId":"435","fix":"471","desc":"437"},{"messageId":"411","fix":"472","desc":"413"},{"messageId":"414","fix":"473","desc":"416"},{"messageId":"411","fix":"474","desc":"413"},{"messageId":"414","fix":"475","desc":"416"},{"messageId":"411","fix":"476","desc":"413"},{"messageId":"414","fix":"477","desc":"416"},{"messageId":"435","fix":"478","desc":"437"},{"messageId":"411","fix":"479","desc":"413"},{"messageId":"414","fix":"480","desc":"416"},{"messageId":"411","fix":"481","desc":"413"},{"messageId":"414","fix":"482","desc":"416"},"suggestUnknown",{"range":"483","text":"484"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"483","text":"485"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"486","text":"484"},{"range":"486","text":"485"},{"range":"487","text":"484"},{"range":"487","text":"485"},{"range":"488","text":"484"},{"range":"488","text":"485"},{"range":"489","text":"484"},{"range":"489","text":"485"},{"range":"490","text":"484"},{"range":"490","text":"485"},{"range":"491","text":"484"},{"range":"491","text":"485"},{"range":"492","text":"484"},{"range":"492","text":"485"},{"range":"493","text":"484"},{"range":"493","text":"485"},{"range":"494","text":"484"},{"range":"494","text":"485"},"suggestOptionalChain",{"range":"495","text":"496"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"497","text":"484"},{"range":"497","text":"485"},{"range":"498","text":"484"},{"range":"498","text":"485"},{"range":"499","text":"484"},{"range":"499","text":"485"},{"range":"500","text":"484"},{"range":"500","text":"485"},{"range":"501","text":"484"},{"range":"501","text":"485"},{"range":"502","text":"484"},{"range":"502","text":"485"},{"range":"503","text":"484"},{"range":"503","text":"485"},{"range":"504","text":"484"},{"range":"504","text":"485"},{"range":"505","text":"484"},{"range":"505","text":"485"},{"range":"506","text":"484"},{"range":"506","text":"485"},{"range":"507","text":"484"},{"range":"507","text":"485"},{"range":"508","text":"484"},{"range":"508","text":"485"},{"range":"509","text":"484"},{"range":"509","text":"485"},{"range":"510","text":"484"},{"range":"510","text":"485"},{"range":"511","text":"484"},{"range":"511","text":"485"},{"range":"512","text":"484"},{"range":"512","text":"485"},{"range":"513","text":"496"},{"range":"514","text":"496"},{"range":"515","text":"484"},{"range":"515","text":"485"},{"range":"516","text":"484"},{"range":"516","text":"485"},{"range":"517","text":"484"},{"range":"517","text":"485"},{"range":"518","text":"496"},{"range":"519","text":"484"},{"range":"519","text":"485"},{"range":"520","text":"484"},{"range":"520","text":"485"},[32,35],"unknown","never",[965,968],[222,225],[1706,1709],[6334,6337],[9632,9635],[10143,10146],[11025,11028],[11520,11523],[12507,12510],[12556,12557],"?",[250,253],[396,399],[498,501],[414,417],[421,424],[302,305],[793,796],[1300,1303],[1824,1827],[2308,2311],[2796,2799],[361,364],[916,919],[1240,1243],[2037,2040],[2260,2263],[2364,2365],[2442,2443],[2468,2471],[9885,9888],[2811,2814],[2858,2859],[2891,2894],[255,258]]