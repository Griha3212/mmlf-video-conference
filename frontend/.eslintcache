[{"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx":"1","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx":"2","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts":"3","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx":"4","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx":"5","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx":"6","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx":"7","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx":"8","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts":"9","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts":"10","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts":"11","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts":"12","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts":"13","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts":"14","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts":"15","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts":"16","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts":"17","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx":"18","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts":"19","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx":"20","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx":"21","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx":"22","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts":"23","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts":"24","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts":"25","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts":"26","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\capitalizeFirstLetter.helper.ts":"27","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts":"28"},{"size":462,"mtime":1611896918476,"results":"29","hashOfConfig":"30"},{"size":999,"mtime":1611219535180,"results":"31","hashOfConfig":"30"},{"size":88,"mtime":1609151476043,"results":"32","hashOfConfig":"30"},{"size":1360,"mtime":1611588354280,"results":"33","hashOfConfig":"30"},{"size":4843,"mtime":1610437764729,"results":"34","hashOfConfig":"30"},{"size":8841,"mtime":1613066076364,"results":"35","hashOfConfig":"30"},{"size":8983,"mtime":1612364205005,"results":"36","hashOfConfig":"30"},{"size":28746,"mtime":1613048717208,"results":"37","hashOfConfig":"30"},{"size":845,"mtime":1609924589133,"results":"38","hashOfConfig":"30"},{"size":1409,"mtime":1611245672776,"results":"39","hashOfConfig":"30"},{"size":1461,"mtime":1612364228958,"results":"40","hashOfConfig":"30"},{"size":816,"mtime":1611588730436,"results":"41","hashOfConfig":"30"},{"size":355,"mtime":1611587774795,"results":"42","hashOfConfig":"30"},{"size":433,"mtime":1609754100539,"results":"43","hashOfConfig":"30"},{"size":4083,"mtime":1612973185246,"results":"44","hashOfConfig":"30"},{"size":2161,"mtime":1611749738661,"results":"45","hashOfConfig":"30"},{"size":551,"mtime":1611587442270,"results":"46","hashOfConfig":"30"},{"size":360,"mtime":1609927664710,"results":"47","hashOfConfig":"30"},{"size":19122,"mtime":1613046154118,"results":"48","hashOfConfig":"30"},{"size":1132,"mtime":1612189320479,"results":"49","hashOfConfig":"30"},{"size":14216,"mtime":1613114042806,"results":"50","hashOfConfig":"30"},{"size":13358,"mtime":1613113537853,"results":"51","hashOfConfig":"30"},{"size":865,"mtime":1612973180299,"results":"52","hashOfConfig":"30"},{"size":474,"mtime":1609927609396,"results":"53","hashOfConfig":"30"},{"size":304,"mtime":1612189320481,"results":"54","hashOfConfig":"30"},{"size":21540,"mtime":1613112547099,"results":"55","hashOfConfig":"30"},{"size":182,"mtime":1612786184832,"results":"56","hashOfConfig":"30"},{"size":10057,"mtime":1613046226846,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"vtgqsx",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx",[],["126","127","128","129","130","131"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx",["132","133","134"],"import React, {\r\n  FC, memo, useState,\r\n} from 'react';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport AdminPage from '../Admin/AdminPage';\r\n\r\n// import LoadingPage from '../../components/LoadingPage/LoadingPage';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport { parseToken } from '../../utils/parseToken';\r\nimport LoginPage from '../Login/LoginPage';\r\nimport UserPage from '../User/UserPage';\r\n\r\nexport const ProtectedRoutes: FC = () => {\r\n  const [isAuth, setIsAuth] = useState(!!getLocalStorageData().token.accessToken);\r\n  if (!isAuth) return <Redirect to=\"/signin\" />;\r\n  const { token } = getLocalStorageData();\r\n\r\n  const [userData, setUserData] = useState(parseToken(token.accessToken as string));\r\n\r\n  if (userData.isAdmin) return <Redirect to=\"/admin\" />;\r\n  if (userData.hasAccessToStatisticPage) return <Redirect to=\"/stats\" />;\r\n  if (!userData.isAdmin) return <Redirect to=\"/user\" />;\r\n\r\n  // }\r\n\r\n  return (\r\n\r\n    <ContentContainer>\r\n      <Switch>\r\n        {(!userData?.isAdmin) && <Route path=\"/user\" component={UserPage} />}\r\n        {(userData?.isAdmin) && <Route path=\"/admin\" component={AdminPage} />}\r\n      </Switch>\r\n    </ContentContainer>\r\n  );\r\n};\r\n\r\nexport default memo(ProtectedRoutes);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx",["135","136","137","138"],"import React, {\n  FC, memo, useState,\n  ChangeEvent,\n} from 'react';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useForm, Controller } from 'react-hook-form';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  useLocation, Prompt, useHistory,\n} from 'react-router-dom';\nimport useStyles from './style';\nimport { apiLogin } from '../../api/login';\n\ntype FormData = {\n  loginCode: string;\n};\n\ninterface Props {\n  onSubmit: (data: FormData) => void;\n\n}\n\nfunction Alert(props: any) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst LoginPage: FC = () => {\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError]: [string, (error: string) => void] = useState('');\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  const {\n    handleSubmit,\n    control, errors: fieldsErrors,\n  } = useForm<FormData>();\n  const onSubmit = async (data: FormData) => {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n    }\n    const response = await apiLogin(data.loginCode);\n\n    if (response && response.status === 404) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 400) {\n      setError('Ошибка');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (!response) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 500) {\n      setError(`${response.data}`);\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n    if (response && response.token && response.refreshToken) {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      setSuccess(true);\n      setLoading(false);\n      history.push('/user');\n    }\n  };\n\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    await setOpen(false);\n  };\n\n  return (\n\n    <Container component=\"main\" maxWidth=\"xs\">\n\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Вход\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            name=\"loginCode\"\n            as={(\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                id=\"loginCode\"\n                label=\"Полученный код\"\n                autoFocus\n              // error={!!fieldsErrors.loginCode?.message}\n              // helperText={fieldsErrors.loginCode ? fieldsErrors.loginCode.message : null}\n              />\n            )}\n            control={control}\n            defaultValue=\"\"\n            rules={{\n              required: 'Введите пожалуйста код',\n              // pattern: {\n              //   value: /^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]+$/i,\n              //   message: 'Incorrect value',\n              // },\n            }}\n          />\n          {fieldsErrors.loginCode && <Typography variant=\"caption\" color=\"error\">{fieldsErrors.loginCode.message}</Typography>}\n          <div className={classes.wrapper}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              // className={classes.submit}\n              className={buttonClassname}\n              disabled={loading}\n            >\n              Войти\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n          </div>\n        </form>\n      </div>\n    </Container>\n\n  );\n};\n\nexport default memo(LoginPage);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx",["139","140","141","142","143","144","145","146","147"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { apiGetStats } from '../../api/stats';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport parseToken from '../../utils/parseToken';\r\nimport useStyles from './style';\r\n\r\ntype User = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  lastName: string;\r\n  email: string;\r\n  createdAt: Date;\r\n\r\n};\r\n\r\ntype Vote = {\r\n  rate: number;\r\n  user: User;\r\n  createdAt: Date;\r\n};\r\n\r\ntype DataForStats = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n  usersWhoWatchedSpeaker: Array<User>;\r\n  usersWhoSendContacts: Array<User>;\r\n  votes: Array<Vote>;\r\n\r\n};\r\n\r\nconst StatsPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [dataForStatsViewer, setDataForStatsViewer] = useState<DataForStats[]>();\r\n\r\n  const loadDataForStatsViewer = async () => {\r\n    const response = await apiGetStats(userData.id, token);\r\n    setDataForStatsViewer(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForStatsViewer();\r\n  }, []);\r\n\r\n  const Row = (props: { row: DataForStats }) => {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    let sum = 0;\r\n\r\n    row.votes.map((element) => {\r\n      sum += element.rate;\r\n    });\r\n\r\n    const medianValue = (+sum / +row.votes.length || 0).toFixed(2);\r\n\r\n    const renderRate = (historyRow: any) => {\r\n      const currentRate = row && row!.votes.find(\r\n        (element: any) => element.user.id === historyRow.id,\r\n      );\r\n\r\n      if (currentRate && currentRate.createdAt && !currentRate.rate) return '0';\r\n      return currentRate && currentRate.rate || 'без оценки';\r\n    };\r\n\r\n    const renderContactCheckbox = (historyRow: any) => {\r\n      const currentContact = row && row!.usersWhoSendContacts.find(\r\n        (element: any) => element.user.id === historyRow.id,\r\n      );\r\n\r\n      if (currentContact) return true;\r\n\r\n      return false;\r\n    };\r\n\r\n    const renderDateOfContactsSending = (historyRow: any) => {\r\n      const currentContact = row && row!.usersWhoSendContacts.find(\r\n        (element: any) => element.user.id === historyRow.id,\r\n      );\r\n\r\n      if (currentContact) {\r\n        const today = new Date(currentContact.createdAt);\r\n        const date = `${today.getDate()}.${today.getMonth() + 1}.${today.getFullYear()}`;\r\n        const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\r\n        const dateTime = `${date} ${time}`;\r\n\r\n        return String(dateTime);\r\n      }\r\n\r\n      return '-';\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <TableRow className={classes.root}>\r\n          <TableCell align=\"center\">\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n            {`${row.firstName} ${row.lastName}`}\r\n          </TableCell>\r\n          <TableCell align=\"center\">{row.usersWhoWatchedSpeaker.length}</TableCell>\r\n          <TableCell align=\"center\">{row.votes.length}</TableCell>\r\n          <TableCell align=\"center\">{medianValue}</TableCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  Подробнее\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\">Имя Фамилия участника</TableCell>\r\n                      <TableCell align=\"center\">Просмотрел</TableCell>\r\n                      <TableCell align=\"center\">Хочет отправить контакты</TableCell>\r\n                      <TableCell align=\"center\">Время отправки</TableCell>\r\n                      <TableCell align=\"center\">Email</TableCell>\r\n                      <TableCell align=\"center\">Оценка</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {row.usersWhoWatchedSpeaker.map((historyRow) => (\r\n                      <TableRow key={historyRow.id}>\r\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                          {`${historyRow.firstName} ${historyRow.lastName}`}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Checkbox\r\n                            defaultChecked\r\n                            color=\"primary\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Checkbox\r\n                            checked={renderContactCheckbox(historyRow)}\r\n                            color=\"primary\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{renderDateOfContactsSending(historyRow)}</TableCell>\r\n                        <TableCell align=\"center\">{`${historyRow.email || '-'}`}</TableCell>\r\n                        <TableCell align=\"center\">{renderRate(historyRow)}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className={classes.pageNameContainer} component=\"main\" maxWidth=\"xs\">\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Просмотра Статистики\r\n          </Typography>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <div className={classes.root}>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell />\r\n                <TableCell align=\"center\">Имя Фамилия спикера</TableCell>\r\n                <TableCell align=\"center\">Количество просмотров</TableCell>\r\n                <TableCell align=\"center\">Количество оценок</TableCell>\r\n                <TableCell align=\"center\">Средняя оценка</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {dataForStatsViewer && dataForStatsViewer.map((row) => (\r\n                <Row key={row.id} row={row} />\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(StatsPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx",["148"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n  ChangeEvent,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport useStyles from './style';\r\nimport { apiGetUser } from '../../api/user';\r\nimport parseToken from '../../utils/parseToken';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport {\r\n  apiChangeActiveSpeakerInChannel, apiDisableLogistOfTheYearSession,\r\n  apiSetBrakeInChannel, apiSetLogistOfTheYearSession,\r\n} from '../../api/admin';\r\n\r\ntype Speaker = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n};\r\n\r\ntype DataForAdmin = {\r\n\r\n  channelAdminInfo: {\r\n    number: number,\r\n  }\r\n\r\n  foundAllSessionsInAdminChannel: Array<Session>\r\n\r\n};\r\n\r\nfunction Alert(props: any) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ntype Session = {\r\n\r\n  description: string;\r\n  id: number;\r\n  letter: string;\r\n  name: string;\r\n  nextSessionDescription: string;\r\n  nextSessionLetter: string;\r\n  speakers: Array<Speaker>;\r\n  voteFoAllSession: boolean;\r\n\r\n};\r\n\r\nconst AdminPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [error]: [string, (error: string) => void] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [activeSpeaker, setActiveSpeaker] = useState('');\r\n\r\n  const [selectedSpeakerToActivate, setSelectedSpeakerToActivate] = useState('');\r\n\r\n  const [dataForAdmin, setDataForAdmin] = useState<DataForAdmin>();\r\n  const [activeButtonId, setActiveButtonId] = useState<number | undefined>();\r\n\r\n  const loadDataForAdmin = async () => {\r\n    const response = await apiGetUser(userData.id, token);\r\n    setDataForAdmin(response);\r\n\r\n    if (response && response.channelAdminInfo && response.channelAdminInfo.activeSpeaker) {\r\n      setActiveSpeaker(`${response.channelAdminInfo.activeSpeaker.lastName} ${response.channelAdminInfo.activeSpeaker.firstName}`);\r\n      setActiveButtonId(response.channelAdminInfo.activeSpeaker.id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForAdmin();\r\n  }, []);\r\n\r\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    await setOpen(false);\r\n  };\r\n\r\n  const activateSelectedSpeaker = async (speakerId: string) => {\r\n    const response = await apiChangeActiveSpeakerInChannel(\r\n      token,\r\n      Number(speakerId),\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n    );\r\n\r\n    setActiveSpeaker(`${response.lastName} ${response.firstName}`);\r\n  };\r\n\r\n  const setBreakBetweenSessions = async () => {\r\n    await apiSetBrakeInChannel(\r\n      token,\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n      Number(activeButtonId),\r\n    );\r\n    setActiveSpeaker('');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const setLogistOfTheYearSession = async () => {\r\n    await apiSetLogistOfTheYearSession(\r\n      token,\r\n    );\r\n    setActiveSpeaker('Логист Года активирован');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const disableLogistOfTheYearSession = async () => {\r\n    await apiDisableLogistOfTheYearSession(\r\n      token,\r\n    );\r\n    setActiveSpeaker('');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const renderSpeakersDataForAdmin = (element: Speaker) => {\r\n    if (!element.isModerator) {\r\n      return (\r\n\r\n        <Grid container xs={12} justify=\"center\">\r\n          <Button\r\n            onClick={(e) => {\r\n              setSelectedSpeakerToActivate(e.currentTarget.value);\r\n              setActiveButtonId(Number(e.currentTarget.value));\r\n            }}\r\n            value={element.id}\r\n            data-id=\"\"\r\n            className={activeButtonId === element.id ?\r\n              classes.speakerButtonActive : classes.speakerButton}\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n          >\r\n            {`${element.lastName}  ${element.firstName}`}\r\n          </Button>\r\n        </Grid>\r\n\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n        <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Администратора\r\n          </Typography>\r\n          <p className={classes.sessionLetter}>\r\n            Канал №\r\n            {dataForAdmin && String(dataForAdmin.channelAdminInfo.number)}\r\n          </p>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <Grid container justify=\"space-around\">\r\n\r\n        <Grid item xs={4}>\r\n\r\n          {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (session: Session) => (\r\n                <>\r\n\r\n                  {session.letter === 'Экскурсия' ? <p className={classes.sessionLetter}>{session.description}</p> : (\r\n                    <p className={classes.sessionLetter}>\r\n                      {session.letter}\r\n                    </p>\r\n                  )}\r\n                  <p>\r\n                    {session.speakers.map(\r\n                      (speaker: Speaker) => renderSpeakersDataForAdmin(speaker),\r\n                    )}\r\n                  </p>\r\n                </>\r\n              ),\r\n            )\r\n          }\r\n\r\n          {/* {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (element: Session) => renderSpeakersDataForAdmin(element),\r\n            )\r\n          } */}\r\n        </Grid>\r\n\r\n        <Grid item justify=\"center\" xs={4}>\r\n          <div className={classes.stickyCentralMenu}>\r\n            <p className={`${classes.textCenter} ${classes.activateSelectedSpeakerP}`}>\r\n              <Button\r\n                className={classes.speakerButton}\r\n                onClick={() => activateSelectedSpeaker(selectedSpeakerToActivate)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Активировать выбранного спикера\r\n\r\n              </Button>\r\n            </p>\r\n\r\n            <p className={classes.textCenter}>\r\n              <Button\r\n                className={classes.speakerButtonBigMargin}\r\n                onClick={() => setBreakBetweenSessions()}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Активировать перерыв\r\n\r\n              </Button>\r\n            </p>\r\n\r\n            {dataForAdmin && dataForAdmin.channelAdminInfo.number === 1 ? (\r\n              <p className={classes.textCenter}>\r\n                <Button\r\n                  className={classes.speakerButton}\r\n                  onClick={() => setLogistOfTheYearSession()}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Активировать награждение Логист Года\r\n\r\n                </Button>\r\n              </p>\r\n            ) : null}\r\n\r\n            {dataForAdmin && dataForAdmin.channelAdminInfo.number === 1 ? (\r\n              <p className={classes.textCenter}>\r\n                <Button\r\n                  className={classes.speakerButton}\r\n                  onClick={() => disableLogistOfTheYearSession()}\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Деактивировать награждение Логист Года\r\n\r\n                </Button>\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <p className={classes.activeSpeakerText}>\r\n            Активный спикер:\r\n            {' '}\r\n            {`${activeSpeaker}`}\r\n          </p>\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(AdminPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx",["149","150","151"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable jsx-a11y/anchor-has-content */\r\n/* eslint-disable jsx-a11y/control-has-associated-label */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable no-nested-ternary */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable no-lone-blocks */\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, {\r\n  FC, memo, useState, useEffect, useRef,\r\n} from 'react';\r\nimport {\r\n  useMediaQuery, Grid, Typography, Button, Hidden,\r\n} from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport useStyles from './style';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport parseToken from '../../utils/parseToken';\r\nimport VideoPlayerMain from '../../components/VideoPlayerMain/VideoPlayerMain';\r\nimport SessionInfoBlock from '../../components/SessionInfoBlock/SessionInfoBlock';\r\nimport topMMLFLogo from '../../img/mmlf_logo_2021.svg';\r\nimport SpeakersSessionInfoBlock from '../../components/SpeakersSessionInfoBlock/SpeakersSessionInfoBlock';\r\nimport {\r\n  apiGetUser, apiUserUpdateWatchedSpeakers,\r\n  apiGetAllChannels, apiUserChangeActiveChannel,\r\n  apiUserUpdateWatchedSpeakersAllInSession,\r\n} from '../../api/user';\r\nimport footerMMLFLogo from '../../img/footer_mmlf_logo.svg';\r\nimport vk from '../../img/socialImg/vk.svg';\r\nimport facebook from '../../img/socialImg/facebook.svg';\r\nimport youtube from '../../img/socialImg/youtube.svg';\r\nimport cclFooter from '../../img/ccl_footer.svg';\r\nimport {\r\n  DataForUser, Vote, Channel, Speaker, DataFromSocket,\r\n} from '../../interfaces/allInterfaces';\r\n\r\nimport sap from '../../img/partnersImg/sap.svg';\r\nimport comitas from '../../img/partnersImg/comitas.svg';\r\nimport smartLogistics from '../../img/partnersImg/smart_logistics.svg';\r\n\r\nimport veeroute from '../../img/partnersImg/veeroute_2021.jpg';\r\nimport atiSu from '../../img/partnersImg/ati.su.png';\r\nimport sberlogistika from '../../img/partnersImg/sblogistica.svg';\r\nimport cemat from '../../img/partnersImg/cematrussia.png';\r\nimport spaceCargo from '../../img/partnersImg/space_cargo.svg';\r\nimport firstLogistics from '../../img/partnersImg/first_logistics.png';\r\n\r\nimport ntls from '../../img/partnersImg/new_tech.png';\r\nimport axelot from '../../img/partnersImg/axelot.svg';\r\n\r\nimport infoscan from '../../img/partnersImg/infoscan.png';\r\nimport psi from '../../img/partnersImg/psi.png';\r\nimport korusKonsalting from '../../img/partnersImg/korus.jpg';\r\nimport medPoint from '../../img/partnersImg/medpoint_logo.png';\r\n\r\nconst socket = io(`${process.env.REACT_APP_API_URL}`, { transports: ['websocket'] });\r\n\r\nconst UserPage: FC = () => {\r\n  const [isAuth] = useState(!!getLocalStorageData().token.accessToken);\r\n  if (!isAuth) return <Redirect to=\"/signin\" />;\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  if (userData.isAdmin) {\r\n    return <Redirect to=\"/admin\" />;\r\n  }\r\n\r\n  if (userData.hasAccessToStatisticPage) {\r\n    return <Redirect to=\"/stats\" />;\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  const [user] = useState(parseToken(token.accessToken as string));\r\n  const history = useHistory();\r\n\r\n  const [dataForUser, setDataForUser] = React.useState<DataForUser>();\r\n\r\n  // active session info\r\n  const [activeSessionLetter, setActiveSessionLetter] = React.useState<DataForUser>();\r\n  const [activeSessionDescription, setActiveSessionDescription] = React.useState<DataForUser>();\r\n\r\n  // active speaker info\r\n  const [activeSpeakerInfo, setActiveSpeakerInfo] = React.useState<DataForUser>();\r\n  const [activeSpeakerRate, setActiveSessionSpeakersRate] = React.useState<number>();\r\n\r\n  // active moderator info\r\n  const [activeModeratorInfo, setActiveModeratorInfo] = React.useState<DataForUser>();\r\n\r\n  // active session speakers info\r\n  const [activeSessionSpeakersInfo, setActiveSessionSpeakersInfo] = React.useState<DataForUser>();\r\n  const [activeSessionSpeakersAllRates, setActiveSessionSpeakersAllRates]\r\n    = React.useState<Vote[]>();\r\n\r\n  // all channels info\r\n\r\n  const [allChannelsInfo, setAllChannelsInfo] = React.useState<Channel[]>();\r\n\r\n  const changeSession = useRef<HTMLDivElement>(null);\r\n\r\n  const executeScroll = () => {\r\n    if (changeSession.current) {\r\n      changeSession.current.scrollIntoView();\r\n    }\r\n  };\r\n  // run this function from an event handler or an effect to execute scroll\r\n\r\n  // on reconnect of socket, if server restarts\r\n  useEffect(() => {\r\n    socket.on('disconnect', () => {\r\n      // connect to personalRoom\r\n      socket.emit('connectToPersonalRoom', user.id);\r\n      // connect to channelRoom\r\n      socket.emit('connectToChannelRoom', user.activeChannel);\r\n    });\r\n  }, []);\r\n\r\n  const findAndSetCurrentSpeakerRate = (votes: Vote[] | undefined) => {\r\n    if (activeSpeakerInfo && votes) {\r\n      const currentSpeakerRate2 = votes.find((element: Vote) => element.speaker.id\r\n        === activeSpeakerInfo.id);\r\n\r\n      setActiveSessionSpeakersRate(currentSpeakerRate2 && currentSpeakerRate2.rate);\r\n    }\r\n  };\r\n\r\n  const loadDataForUser = async () => {\r\n    const response = await apiGetUser(userData.id, token);\r\n    setDataForUser(response);\r\n\r\n    const response2 = await apiGetAllChannels(userData.id, token);\r\n    setAllChannelsInfo(response2);\r\n\r\n    if (response) {\r\n      setActiveSessionLetter(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession && response.channelUserInfo.activeSession.letter);\r\n\r\n      setActiveSessionDescription(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession\r\n        && response.channelUserInfo.activeSession.description);\r\n\r\n      setActiveSpeakerInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSpeaker);\r\n\r\n      setActiveModeratorInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession &&\r\n        response.channelUserInfo.activeSession.speakers.find(\r\n          (element: Speaker) => element.isModerator,\r\n        ));\r\n\r\n      setActiveSessionSpeakersInfo(response && response.channelUserInfo\r\n        && response.channelUserInfo.activeSession\r\n        && response.channelUserInfo.activeSession.speakers);\r\n      socket.emit('connectToChannelRoom', response.foundUser.activeChannel);\r\n    }\r\n  };\r\n\r\n  const updateWatchedSpeakersSingleSpeaker = async (speakerId: number) => {\r\n    await apiUserUpdateWatchedSpeakers(speakerId, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  const updateWatchedSpeakersAllSpeakersInSession = async (sessionId: number) => {\r\n    await apiUserUpdateWatchedSpeakersAllInSession(sessionId, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  // watch timer functional\r\n\r\n  // if there is active speaker, update timer every seconds,\r\n  // until 10, then speaker status set to viewed\r\n  // if type of session voteForAllSession another logic\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // count for single speaker\r\n      if (activeSpeakerInfo && dataForUser &&\r\n        !dataForUser.channelUserInfo.activeSession.voteFoAllSession) {\r\n        let initialValueCurrentSpeaker = localStorage.getItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`);\r\n\r\n        if (!initialValueCurrentSpeaker) {\r\n          localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, '0');\r\n        } else {\r\n          if (initialValueCurrentSpeaker !== 'viewed') {\r\n            if (initialValueCurrentSpeaker === '5') {\r\n              localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, 'viewed');\r\n              // send to back viewed status\r\n              updateWatchedSpeakersSingleSpeaker(activeSpeakerInfo.id);\r\n            } else {\r\n              initialValueCurrentSpeaker = String(+initialValueCurrentSpeaker + 1);\r\n              localStorage.setItem(`${String(activeSpeakerInfo && activeSpeakerInfo.id)}`, initialValueCurrentSpeaker);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // count for complete session\r\n      if (activeSpeakerInfo && dataForUser &&\r\n        dataForUser.channelUserInfo.activeSession.voteFoAllSession) {\r\n        let initialValueCurrentSession = localStorage.getItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`);\r\n\r\n        if (!initialValueCurrentSession) {\r\n          localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, '0');\r\n        } else {\r\n          if (initialValueCurrentSession !== 'viewed') {\r\n            if (initialValueCurrentSession === '5') {\r\n              localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, 'viewed');\r\n              // send to back viewed status\r\n              updateWatchedSpeakersAllSpeakersInSession(\r\n                dataForUser.channelUserInfo.activeSession.id,\r\n              );\r\n            } else {\r\n              initialValueCurrentSession = String(+initialValueCurrentSession + 1);\r\n              localStorage.setItem(`${String(dataForUser.channelUserInfo.activeSession.name)}`, initialValueCurrentSession);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [activeSpeakerInfo]);\r\n\r\n  useEffect(() => {\r\n    socket.on('connectToPersonalRoom', (dataFromSocket: DataFromSocket) => {\r\n      if (dataFromSocket.message === 'disconnect current user') {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        history.push('/');\r\n      }\r\n\r\n      if (dataFromSocket.message === 'update current speakers votes') {\r\n        loadDataForUser();\r\n        // setActiveSessionSpeakersAllRates(data.votes);\r\n      }\r\n\r\n      if (dataFromSocket.message === 'update user info') {\r\n        loadDataForUser();\r\n      }\r\n    });\r\n    return () => {\r\n      socket.off('connectToPersonalRoom');\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.on('connectToChannelRoom', (dataFromSocket: DataFromSocket) => {\r\n      loadDataForUser();\r\n\r\n      if (dataFromSocket.message === 'update') {\r\n        loadDataForUser();\r\n      }\r\n    });\r\n    return () => {\r\n      socket.off('connectToChannelRoom');\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.emit('connectToPersonalRoom', user.id);\r\n    loadDataForUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // loadDataForUser();\r\n    findAndSetCurrentSpeakerRate(dataForUser && dataForUser.foundUser.votes);\r\n    setActiveSessionSpeakersAllRates(dataForUser && dataForUser.foundUser.votes);\r\n  }, [activeSpeakerInfo]);\r\n\r\n  // const sendLoginDataToServer =\r\n\r\n  const changeActiveChannel = async (channelNumber: number) => {\r\n    await apiUserChangeActiveChannel(channelNumber, userData.id, token);\r\n    loadDataForUser();\r\n  };\r\n\r\n  const renderSessionLetterOfTheSessionInChannel = (channel: any) => {\r\n    if (channel) {\r\n      if (!channel.activeSession && channel.break) {\r\n        return channel.startChannelSessionLetter;\r\n      }\r\n\r\n      if (channel.activeSession && channel.break) {\r\n        return channel.activeSession.nextSessionLetter;\r\n      }\r\n\r\n      if (channel.activeSession.letter) {\r\n        return channel.activeSession.letter;\r\n      } else return 'Сессия #';\r\n    } else return 'Сессия #';\r\n  };\r\n\r\n  const renderSessionDescriptionOfTheSessionInChannel = (channel: any) => {\r\n    if (channel) {\r\n      if (!channel.activeSession && channel.break) {\r\n        return channel.startChannelSessionDescription;\r\n      }\r\n\r\n      if (channel.activeSession && channel.break) {\r\n        return channel.activeSession.nextSessionDescription;\r\n      }\r\n\r\n      if (channel.activeSession.description) {\r\n        return channel.activeSession.description;\r\n      } else return 'Назавание сессии';\r\n    } else return 'Назавание сессии';\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const isXl = useMediaQuery(theme.breakpoints.up('xl'));\r\n  const isLg = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const isMd = useMediaQuery(theme.breakpoints.up('md'));\r\n  const isSm = useMediaQuery(theme.breakpoints.up('sm'));\r\n  const isXs = useMediaQuery(theme.breakpoints.up('xs'));\r\n\r\n  const calculateHeightOfSmallChannelWindow = () => {\r\n    if (isXl) return '235px';\r\n    if (isLg) return '143px';\r\n    if (isMd) return '160px';\r\n    if (isXs) return '227px';\r\n  };\r\n\r\n  const calculateHeightOfBigChannelWindow = () => {\r\n    if (isXl) return '720px';\r\n    if (isLg) return '720px';\r\n    if (isMd) return '720px';\r\n    if (isSm) return '300px';\r\n    if (isXs) return '300px';\r\n  };\r\n\r\n  const renderSpeakersSessionInfoBlock = () => {\r\n    // if first session and start position, don't show block\r\n    if (dataForUser && !dataForUser.channelUserInfo.activeSession\r\n      && dataForUser.channelUserInfo.number === 1) {\r\n      return null;\r\n    }\r\n    // if LogistOfTheYear, don't show block\r\n    if (dataForUser && dataForUser.channelUserInfo.activeSession\r\n      && dataForUser.channelUserInfo.activeSession.name === 'LogistOfTheYear') {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <Grid item className={classes.innerContainer}>\r\n\r\n          <SpeakersSessionInfoBlock\r\n            currentModeratorInfo={activeModeratorInfo}\r\n            currentSessionSpeakersInfo={activeSessionSpeakersInfo}\r\n            currentSessionSpeakersAllRates={activeSessionSpeakersAllRates}\r\n            currentUserData={dataForUser}\r\n            token={token}\r\n            userId={user.id}\r\n            key={activeSessionSpeakersAllRates}\r\n          />\r\n\r\n        </Grid>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderOtherSessions = (channel: any) => {\r\n    if (channel.number !== dataForUser?.channelUserInfo.number) {\r\n      return (\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.channelContainer}\r\n            id={channel.number}\r\n            onClick={(e) => changeActiveChannel(+e.currentTarget.id)}\r\n          >\r\n\r\n            <VideoPlayerMain height={calculateHeightOfSmallChannelWindow()} classNameInner=\"channelVideoContainer\" videoURL={channel.link} />\r\n\r\n            <Grid item xs={12} className={classes.channelContainerBottomPart}>\r\n\r\n              <p className={classes.chooseChannelSessionLetter}>\r\n                {renderSessionLetterOfTheSessionInChannel(channel)}\r\n              </p>\r\n              <p className={classes.chooseChannelSessionDescription}>\r\n                {renderSessionDescriptionOfTheSessionInChannel(channel)}\r\n              </p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* header pc */}\r\n      <Hidden xsDown>\r\n        <Grid\r\n          container\r\n          xl={12}\r\n          justify=\"space-between\"\r\n          className={`${classes.mainContainer} ${classes.darkBlueBckgTop} ${classes.topPart}`}\r\n        >\r\n\r\n          <Grid item className={classes.myAuto} lg={3} xl={3} sm={4}>\r\n            <img\r\n              onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n              className={classes.mmlfTopLogoImg}\r\n              src={topMMLFLogo}\r\n              alt=\"\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} xl={6} lg={6} sm={4}>\r\n            <Typography className={classes.conferenceTopText} align=\"center\">Конференция</Typography>\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} xl={3} lg={3} sm={4}>\r\n            <Button\r\n              onClick={() => { window.open('https://www.mmlf.ru/programma-mmlf-2021.html', '_blank'); }}\r\n              className={classes.loadProgramButton}\r\n            >\r\n              Скачать программу\r\n            </Button>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Hidden>\r\n\r\n      {/* header mobile */}\r\n      <Hidden only={['lg', 'xl', 'md', 'sm']}>\r\n        <Grid\r\n          container\r\n          xl={12}\r\n          justify=\"space-between\"\r\n          className={`${classes.mainContainer} ${classes.darkBlueBckgTop} ${classes.topPart}`}\r\n        >\r\n\r\n          <Grid item className={classes.myAuto} xs={6}>\r\n            <p style={{ marginBottom: '0px' }}>\r\n              <img\r\n                onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n                className={classes.mmlfTopLogoImg}\r\n                src={topMMLFLogo}\r\n                alt=\"\"\r\n              />\r\n\r\n            </p>\r\n            <p style={{ marginTop: '5px' }}><Typography className={classes.conferenceTopText} align=\"center\">Конференция</Typography></p>\r\n\r\n          </Grid>\r\n\r\n          <Grid item className={classes.myAuto} sm={6} xs={6}>\r\n            <Button\r\n              onClick={() => { window.open('https://www.mmlf.ru/programma-mmlf-2021.html', '_blank'); }}\r\n              className={classes.loadProgramButton}\r\n            >\r\n              Скачать программу\r\n            </Button>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Hidden>\r\n\r\n      <Grid container className={classes.mainVideoContainer} xl justify=\"center\">\r\n\r\n        <VideoPlayerMain\r\n          height={calculateHeightOfBigChannelWindow()}\r\n          classNameInner=\"mainVideoContainerBig\"\r\n          videoURL={dataForUser && dataForUser.channelUserInfo.link}\r\n        />\r\n\r\n      </Grid>\r\n\r\n      {/* <Grid container className={classes.containerForPartnersTop} xl>\r\n        <Grid item xl={4}>\r\n          <img className={classes.multicolorLine} src={multicolorLine} alt=\"\" />\r\n        </Grid>\r\n\r\n        <Grid item container justify=\"flex-end\" xl={8}>\r\n          <Grid item className={classes.singleTopPartnerContainer}>\r\n            <p className={classes.topPartnersText}>Генеральный партнер</p>\r\n            <img src={sapTop} alt=\"\" />\r\n          </Grid>\r\n          <Grid item className={classes.singleTopPartnerContainer}>\r\n            <p className={classes.topPartnersText}>Эксклюзивный партнер</p>\r\n            <img src={comitasTop} alt=\"\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <p className={classes.topPartnersText}>IT партнер</p>\r\n            <img src={smartLogisticsTop} alt=\"\" />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid> */}\r\n\r\n      {/* <Grid container xl={12}>\r\n        <img className={classes.greyDecoratedLine} src={greyDecoratedLine} alt=\"\" />\r\n      </Grid> */}\r\n\r\n      {/* red bckg */}\r\n      <Grid\r\n        className={renderSpeakersSessionInfoBlock() ? classes.redBckgContainer :\r\n          classes.redBckgContainerShort}\r\n        container\r\n        item\r\n        justify=\"center\"\r\n      />\r\n\r\n      {/* first block (active speaker) info ---------------------------*/}\r\n      <Grid item className={classes.innerContainer}>\r\n        <SessionInfoBlock\r\n          executeScroll={executeScroll}\r\n          currentSessionLetter={activeSessionLetter}\r\n          currentSessionDescription={activeSessionDescription}\r\n          currentSpeakerInfo={activeSpeakerInfo}\r\n          token={token}\r\n          userId={user.id}\r\n          currentSpeakerRate={activeSpeakerRate}\r\n          currentUserData={dataForUser}\r\n          key={dataForUser}\r\n        />\r\n\r\n      </Grid>\r\n\r\n      {/* block with all speakers in session---------------------------------------------------\r\n      render if not LogistOfTheYear */}\r\n      {renderSpeakersSessionInfoBlock()}\r\n\r\n      {/* show/hide OtherChannelsBlock-------------------------------------------------------- */}\r\n      {dataForUser && dataForUser.foundUser.showOtherChannelsBlock ? (\r\n        <Grid container className={classes.changeSessionMainContainer} xl>\r\n          <Grid ref={changeSession} item className={classes.innerContainer}>\r\n            <Grid xs={12} item container className={`${classes.mainContainerBckgChangeSession} ${classes.mainContainerBckgChangeSessionFirst}`}>\r\n              <p className={classes.speakersBlockHeader}>Сменить сессию</p>\r\n            </Grid>\r\n\r\n            <Grid\r\n              xs={12}\r\n              item\r\n              justify=\"space-between\"\r\n              container\r\n              className={`${classes.mainContainerBckgChangeSession}\r\n             ${classes.otherSessionContainerInner}`}\r\n            >\r\n              {allChannelsInfo && dataForUser\r\n                && allChannelsInfo.map((element) => renderOtherSessions(element))}\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n      ) : null}\r\n\r\n      <Grid container className={classes.partnersContainer} justify=\"space-around\">\r\n\r\n        <Grid item className={classes.innerContainer}>\r\n          <Grid xs={12} item container className={classes.mainContainerBckgChangeSession}>\r\n            <p className={`${classes.speakersBlockHeader} ${classes.partnersHeader}`}>Партнеры сессии</p>\r\n          </Grid>\r\n\r\n          <Grid justify=\"space-between\" container item className={`${classes.mainContainerBckgChangeSession} ${classes.partnersContainerImg}`}>\r\n\r\n            <Grid\r\n              className={`${classes.myAuto} ${classes.partnerImgContainer}`}\r\n              item\r\n              xs={10}\r\n              sm={12}\r\n              md={4}\r\n              xl={3}\r\n              lg={3}\r\n            >\r\n              <p className={classes.imgPartnerP}>\r\n                {' '}\r\n                <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={sap} alt=\"\" />\r\n              </p>\r\n\r\n              <p className={classes.partnerText}>\r\n                Генеральный\r\n                партнер\r\n              </p>\r\n\r\n            </Grid>\r\n\r\n            <Grid\r\n              className={`${classes.myAuto} ${classes.partnerImgContainer}`}\r\n              item\r\n              xs={10}\r\n              sm={12}\r\n              md={4}\r\n              xl={3}\r\n              lg={3}\r\n            >\r\n\r\n              <p className={classes.imgPartnerP}>\r\n                {' '}\r\n                <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={comitas} alt=\"\" />\r\n              </p>\r\n              <p className={classes.partnerText}>\r\n                Эксклюзивный\r\n                партнер\r\n              </p>\r\n            </Grid>\r\n\r\n            <Grid\r\n              className={`${classes.myAuto} ${classes.partnerImgContainer}`}\r\n              item\r\n              xs={10}\r\n              sm={12}\r\n              md={4}\r\n              xl={3}\r\n              lg={3}\r\n            >\r\n\r\n              <p className={classes.imgPartnerP}>\r\n                {' '}\r\n                <img className={`${classes.imgFluid} ${classes.imgPartner}`} src={smartLogistics} alt=\"\" />\r\n              </p>\r\n              <p className={classes.partnerText}>IT-партнер</p>\r\n\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            justify=\"space-between\"\r\n            container\r\n            direction=\"row\"\r\n            item\r\n            className={`${classes.mainContainerBckgChangeSession} ${classes.partnersContainerImg2}`}\r\n          >\r\n\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={veeroute} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={atiSu} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={sberlogistika} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={cemat} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={spaceCargo} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={firstLogistics} alt=\"\" />\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n          <Grid\r\n            justify=\"space-between\"\r\n            container\r\n            direction=\"row\"\r\n            item\r\n            className={`${classes.mainContainerBckgChangeSession}`}\r\n          >\r\n\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={ntls} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={axelot} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={infoscan} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={psi} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={korusKonsalting} alt=\"\" />\r\n            </Grid>\r\n            <Grid className={`${classes.myAuto} ${classes.partnerImgContainerBottom}`} item xs>\r\n              <img className={`${classes.imgFluid}`} src={medPoint} alt=\"\" />\r\n            </Grid>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* footer--------------------------------------------------------------------------- */}\r\n      <Grid container>\r\n\r\n        <Grid item container justify=\"space-around\" className={classes.footerContainer}>\r\n\r\n          <Grid justify=\"space-between\" container item className={classes.footerContainerInner}>\r\n\r\n            <Grid xs={12} md={3} xl={3} lg={3} className={`${classes.myAuto} ${classes.footerLogoContainer}`} item>\r\n              <img\r\n                onClick={() => { window.open('https://mmlf.ru/', '_blank'); }}\r\n                className={`${classes.cursorPointer} ${classes.mmlfFooterLogo}`}\r\n                src={footerMMLFLogo}\r\n                alt=\"\"\r\n              />\r\n\r\n            </Grid>\r\n            <Grid xs={12} md={4} xl={3} lg={3} className={classes.myAuto} item>\r\n              <p className={classes.footerTextDate}>15-19 февраля 2021</p>\r\n            </Grid>\r\n            <Grid xs={8} sm={4} md={2} xl={2} lg={2} className={classes.myAuto} item>\r\n              <Grid container item justify=\"space-around\">\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://vk.com/ccl_logistics', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={vk}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://www.facebook.com/logcouncil/', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={facebook}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <img\r\n                    onClick={() => { window.open('https://www.youtube.com/channel/UCtWoEZ_O5QBtBQHg4Z5OM2A', '_blank'); }}\r\n                    className={`${classes.cursorPointer} ${classes.socialFooterImg}`}\r\n                    src={youtube}\r\n                    alt=\"\"\r\n                  />\r\n                </Grid>\r\n\r\n              </Grid>\r\n\r\n            </Grid>\r\n            <Grid xs={12} md={3} xl={2} lg={2} className={`${classes.myAuto} ${classes.footerLogoAndPhone}`} item>\r\n              <p>\r\n                <img\r\n                  onClick={() => { window.open('https://ccl-logistics.ru/', '_blank'); }}\r\n                  className={classes.cursorPointer}\r\n                  src={cclFooter}\r\n                  alt=\"\"\r\n                />\r\n\r\n              </p>\r\n              <p><a className={classes.bottomLink} href=\"tel:+7 (495) 763-91-95\">+7 (495) 763-91-95</a></p>\r\n\r\n            </Grid>\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(UserPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts",["152"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\n// Login\nexport const apiLogin = async (\n  loginCode: string,\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.login}`;\n\n  try {\n    const { data } = await axios.post(url, { loginCode });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts",["153","154","155","156","157","158","159","160"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n\n// Login\nexport const apiGetUser = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getUser}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiVoteForSpeaker = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  rate: number | null,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.voteForSpeaker}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId, rate }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakers = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakers}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateContactedSpeakers = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateContactedSpeakers}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserTakeAPartInRafflePrizes = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userTakeAPartInRafflePrizes}`;\n\n  try {\n    const { data } = await axios.post(url, { userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakersAllInSession = async (\n  sessionId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakersAll}`;\n\n  try {\n    const { data } = await axios.post(url, { sessionId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiGetAllChannels = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getAllChannels}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserChangeActiveChannel = async (\n  channelNumber: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelNumber, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts",["161","162","163","164"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\nexport const apiChangeActiveSpeakerInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  speakerIdToActivate: number,\n  channelForShowingNumber: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveSpeakerInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerIdToActivate, channelForShowingNumber }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiSetBrakeInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  channelForShowingNumber: number,\n  prevSpeakerid: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.setBrakeInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelForShowingNumber, prevSpeakerid }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiSetLogistOfTheYearSession = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.setLogistOfTheYear}`;\n\n  try {\n    const { data } = await axios.post(url, {}, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiDisableLogistOfTheYearSession = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.disableLogistOfTheYear}`;\n\n  try {\n    const { data } = await axios.post(url, {}, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts",["165"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n\nexport const apiGetStats = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getStats}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx",["166"],"import React, { FC } from 'react';\r\nimport { Hidden } from '@material-ui/core';\r\nimport useStyles from './style';\r\n\r\nexport const ContentContainer: FC = ({ children }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n\r\n      <div className={classes.container}>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentContainer;\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx",["167","168","169","170","171","172","173","174"],"import React, { memo, useState } from 'react';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport Iframe from 'react-iframe';\r\nimport { createPortal } from 'react-dom';\r\nimport useStyles from './style';\r\n\r\nconst VideoPlayerMain = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  const [contentRef, setContentRef] = useState(null);\r\n  const mountNode = contentRef;\r\n  const inputRef: any = React.useRef<HTMLInputElement>(null); // note the passed in `null` arg\r\n\r\n  const playVideo = (): any => {\r\n\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      data-testid=\"loading-page\"\r\n    >\r\n      <div\r\n        className={props.classNameInner}\r\n        ref={inputRef}\r\n      >\r\n        <Iframe\r\n          // test url https://facecast.net/v/pybh3r?nolabel&noanimation&autorun=true&t=30\r\n          url={props.videoURL}\r\n          width=\"100%\"\r\n          height={props.height}\r\n          position=\"relative\"\r\n          allow=\"fullscreen\"\r\n          onLoad={playVideo()}\r\n        />\r\n      </div>\r\n    </Grid>\r\n\r\n  );\r\n};\r\n\r\nexport default memo(VideoPlayerMain);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx",["175","176"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx",["177","178","179"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\capitalizeFirstLetter.helper.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":16,"column":8,"nodeType":"194","messageId":"195","endLine":16,"endColumn":17},{"ruleId":"192","severity":1,"message":"196","line":20,"column":18,"nodeType":"194","messageId":"195","endLine":20,"endColumn":27},{"ruleId":"192","severity":1,"message":"197","line":24,"column":20,"nodeType":"194","messageId":"195","endLine":24,"endColumn":31},{"ruleId":"192","severity":1,"message":"198","line":19,"column":3,"nodeType":"194","messageId":"195","endLine":19,"endColumn":14},{"ruleId":"192","severity":1,"message":"199","line":19,"column":16,"nodeType":"194","messageId":"195","endLine":19,"endColumn":22},{"ruleId":"192","severity":1,"message":"200","line":28,"column":11,"nodeType":"194","messageId":"195","endLine":28,"endColumn":16},{"ruleId":"201","severity":1,"message":"202","line":33,"column":23,"nodeType":"203","messageId":"204","endLine":33,"endColumn":26,"suggestions":"205"},{"ruleId":"201","severity":1,"message":"202","line":99,"column":37,"nodeType":"203","messageId":"204","endLine":99,"endColumn":40,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":100,"column":34,"nodeType":"209","messageId":"210","endLine":100,"endColumn":38,"suggestions":"211"},{"ruleId":"201","severity":1,"message":"202","line":101,"column":19,"nodeType":"203","messageId":"204","endLine":101,"endColumn":22,"suggestions":"212"},{"ruleId":"201","severity":1,"message":"202","line":108,"column":48,"nodeType":"203","messageId":"204","endLine":108,"endColumn":51,"suggestions":"213"},{"ruleId":"207","severity":1,"message":"208","line":109,"column":37,"nodeType":"209","messageId":"210","endLine":109,"endColumn":41,"suggestions":"214"},{"ruleId":"201","severity":1,"message":"202","line":110,"column":19,"nodeType":"203","messageId":"204","endLine":110,"endColumn":22,"suggestions":"215"},{"ruleId":"201","severity":1,"message":"202","line":118,"column":54,"nodeType":"203","messageId":"204","endLine":118,"endColumn":57,"suggestions":"216"},{"ruleId":"207","severity":1,"message":"208","line":119,"column":37,"nodeType":"209","messageId":"210","endLine":119,"endColumn":41,"suggestions":"217"},{"ruleId":"201","severity":1,"message":"202","line":120,"column":19,"nodeType":"203","messageId":"204","endLine":120,"endColumn":22,"suggestions":"218"},{"ruleId":"201","severity":1,"message":"202","line":54,"column":23,"nodeType":"203","messageId":"204","endLine":54,"endColumn":26,"suggestions":"219"},{"ruleId":"201","severity":1,"message":"202","line":281,"column":62,"nodeType":"203","messageId":"204","endLine":281,"endColumn":65,"suggestions":"220"},{"ruleId":"201","severity":1,"message":"202","line":297,"column":67,"nodeType":"203","messageId":"204","endLine":297,"endColumn":70,"suggestions":"221"},{"ruleId":"201","severity":1,"message":"202","line":364,"column":41,"nodeType":"203","messageId":"204","endLine":364,"endColumn":44,"suggestions":"222"},{"ruleId":"201","severity":1,"message":"202","line":10,"column":12,"nodeType":"203","messageId":"204","endLine":10,"endColumn":15,"suggestions":"223"},{"ruleId":"201","severity":1,"message":"202","line":13,"column":12,"nodeType":"203","messageId":"204","endLine":13,"endColumn":15,"suggestions":"224"},{"ruleId":"201","severity":1,"message":"202","line":36,"column":12,"nodeType":"203","messageId":"204","endLine":36,"endColumn":15,"suggestions":"225"},{"ruleId":"201","severity":1,"message":"202","line":58,"column":12,"nodeType":"203","messageId":"204","endLine":58,"endColumn":15,"suggestions":"226"},{"ruleId":"201","severity":1,"message":"202","line":80,"column":12,"nodeType":"203","messageId":"204","endLine":80,"endColumn":15,"suggestions":"227"},{"ruleId":"201","severity":1,"message":"202","line":101,"column":12,"nodeType":"203","messageId":"204","endLine":101,"endColumn":15,"suggestions":"228"},{"ruleId":"201","severity":1,"message":"202","line":123,"column":12,"nodeType":"203","messageId":"204","endLine":123,"endColumn":15,"suggestions":"229"},{"ruleId":"201","severity":1,"message":"202","line":145,"column":12,"nodeType":"203","messageId":"204","endLine":145,"endColumn":15,"suggestions":"230"},{"ruleId":"201","severity":1,"message":"202","line":167,"column":12,"nodeType":"203","messageId":"204","endLine":167,"endColumn":15,"suggestions":"231"},{"ruleId":"201","severity":1,"message":"202","line":13,"column":12,"nodeType":"203","messageId":"204","endLine":13,"endColumn":15,"suggestions":"232"},{"ruleId":"201","severity":1,"message":"202","line":35,"column":12,"nodeType":"203","messageId":"204","endLine":35,"endColumn":15,"suggestions":"233"},{"ruleId":"201","severity":1,"message":"202","line":56,"column":12,"nodeType":"203","messageId":"204","endLine":56,"endColumn":15,"suggestions":"234"},{"ruleId":"201","severity":1,"message":"202","line":77,"column":12,"nodeType":"203","messageId":"204","endLine":77,"endColumn":15,"suggestions":"235"},{"ruleId":"201","severity":1,"message":"202","line":12,"column":12,"nodeType":"203","messageId":"204","endLine":12,"endColumn":15,"suggestions":"236"},{"ruleId":"192","severity":1,"message":"237","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":16},{"ruleId":"192","severity":1,"message":"238","line":2,"column":16,"nodeType":"194","messageId":"195","endLine":2,"endColumn":32},{"ruleId":"192","severity":1,"message":"239","line":4,"column":10,"nodeType":"194","messageId":"195","endLine":4,"endColumn":22},{"ruleId":"201","severity":1,"message":"202","line":7,"column":33,"nodeType":"203","messageId":"204","endLine":7,"endColumn":36,"suggestions":"240"},{"ruleId":"192","severity":1,"message":"241","line":8,"column":9,"nodeType":"194","messageId":"195","endLine":8,"endColumn":16},{"ruleId":"192","severity":1,"message":"242","line":10,"column":22,"nodeType":"194","messageId":"195","endLine":10,"endColumn":35},{"ruleId":"192","severity":1,"message":"243","line":11,"column":9,"nodeType":"194","messageId":"195","endLine":11,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":12,"column":19,"nodeType":"203","messageId":"204","endLine":12,"endColumn":22,"suggestions":"244"},{"ruleId":"201","severity":1,"message":"202","line":14,"column":25,"nodeType":"203","messageId":"204","endLine":14,"endColumn":28,"suggestions":"245"},{"ruleId":"201","severity":1,"message":"202","line":18,"column":34,"nodeType":"203","messageId":"204","endLine":18,"endColumn":37,"suggestions":"246"},{"ruleId":"192","severity":1,"message":"247","line":24,"column":10,"nodeType":"194","messageId":"195","endLine":24,"endColumn":14},{"ruleId":"192","severity":1,"message":"248","line":5,"column":23,"nodeType":"194","messageId":"195","endLine":5,"endColumn":32},{"ruleId":"201","severity":1,"message":"202","line":25,"column":42,"nodeType":"203","messageId":"204","endLine":25,"endColumn":45,"suggestions":"249"},{"ruleId":"201","severity":1,"message":"202","line":48,"column":19,"nodeType":"203","messageId":"204","endLine":48,"endColumn":22,"suggestions":"250"},"lines-around-directive",["251"],"no-spaced-func",["252"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'LoginPage' is defined but never used.","Identifier","unusedVar","'setIsAuth' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'useLocation' is defined but never used.","'Prompt' is defined but never used.","'Props' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["253","254"],["255","256"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["257"],["258","259"],["260","261"],["262"],["263","264"],["265","266"],["267"],["268","269"],["270","271"],["272","273"],["274","275"],["276","277"],["278","279"],["280","281"],["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],["300","301"],["302","303"],["304","305"],"'Hidden' is defined but never used.","'CircularProgress' is defined but never used.","'createPortal' is defined but never used.",["306","307"],"'classes' is assigned a value but never used.","'setContentRef' is assigned a value but never used.","'mountNode' is assigned a value but never used.",["308","309"],["310","311"],["312","313"],"'rate' is assigned a value but never used.","'useEffect' is defined but never used.",["314","315"],["316","317"],"padding-line-between-statements","func-call-spacing",{"messageId":"318","fix":"319","desc":"320"},{"messageId":"321","fix":"322","desc":"323"},{"messageId":"318","fix":"324","desc":"320"},{"messageId":"321","fix":"325","desc":"323"},{"messageId":"326","fix":"327","desc":"328"},{"messageId":"318","fix":"329","desc":"320"},{"messageId":"321","fix":"330","desc":"323"},{"messageId":"318","fix":"331","desc":"320"},{"messageId":"321","fix":"332","desc":"323"},{"messageId":"326","fix":"333","desc":"328"},{"messageId":"318","fix":"334","desc":"320"},{"messageId":"321","fix":"335","desc":"323"},{"messageId":"318","fix":"336","desc":"320"},{"messageId":"321","fix":"337","desc":"323"},{"messageId":"326","fix":"338","desc":"328"},{"messageId":"318","fix":"339","desc":"320"},{"messageId":"321","fix":"340","desc":"323"},{"messageId":"318","fix":"341","desc":"320"},{"messageId":"321","fix":"342","desc":"323"},{"messageId":"318","fix":"343","desc":"320"},{"messageId":"321","fix":"344","desc":"323"},{"messageId":"318","fix":"345","desc":"320"},{"messageId":"321","fix":"346","desc":"323"},{"messageId":"318","fix":"347","desc":"320"},{"messageId":"321","fix":"348","desc":"323"},{"messageId":"318","fix":"349","desc":"320"},{"messageId":"321","fix":"350","desc":"323"},{"messageId":"318","fix":"351","desc":"320"},{"messageId":"321","fix":"352","desc":"323"},{"messageId":"318","fix":"353","desc":"320"},{"messageId":"321","fix":"354","desc":"323"},{"messageId":"318","fix":"355","desc":"320"},{"messageId":"321","fix":"356","desc":"323"},{"messageId":"318","fix":"357","desc":"320"},{"messageId":"321","fix":"358","desc":"323"},{"messageId":"318","fix":"359","desc":"320"},{"messageId":"321","fix":"360","desc":"323"},{"messageId":"318","fix":"361","desc":"320"},{"messageId":"321","fix":"362","desc":"323"},{"messageId":"318","fix":"363","desc":"320"},{"messageId":"321","fix":"364","desc":"323"},{"messageId":"318","fix":"365","desc":"320"},{"messageId":"321","fix":"366","desc":"323"},{"messageId":"318","fix":"367","desc":"320"},{"messageId":"321","fix":"368","desc":"323"},{"messageId":"318","fix":"369","desc":"320"},{"messageId":"321","fix":"370","desc":"323"},{"messageId":"318","fix":"371","desc":"320"},{"messageId":"321","fix":"372","desc":"323"},{"messageId":"318","fix":"373","desc":"320"},{"messageId":"321","fix":"374","desc":"323"},{"messageId":"318","fix":"375","desc":"320"},{"messageId":"321","fix":"376","desc":"323"},{"messageId":"318","fix":"377","desc":"320"},{"messageId":"321","fix":"378","desc":"323"},{"messageId":"318","fix":"379","desc":"320"},{"messageId":"321","fix":"380","desc":"323"},{"messageId":"318","fix":"381","desc":"320"},{"messageId":"321","fix":"382","desc":"323"},{"messageId":"318","fix":"383","desc":"320"},{"messageId":"321","fix":"384","desc":"323"},{"messageId":"318","fix":"385","desc":"320"},{"messageId":"321","fix":"386","desc":"323"},{"messageId":"318","fix":"387","desc":"320"},{"messageId":"321","fix":"388","desc":"323"},"suggestUnknown",{"range":"389","text":"390"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"389","text":"391"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"392","text":"390"},{"range":"392","text":"391"},"suggestOptionalChain",{"range":"393","text":"394"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"395","text":"390"},{"range":"395","text":"391"},{"range":"396","text":"390"},{"range":"396","text":"391"},{"range":"397","text":"394"},{"range":"398","text":"390"},{"range":"398","text":"391"},{"range":"399","text":"390"},{"range":"399","text":"391"},{"range":"400","text":"394"},{"range":"401","text":"390"},{"range":"401","text":"391"},{"range":"402","text":"390"},{"range":"402","text":"391"},{"range":"403","text":"390"},{"range":"403","text":"391"},{"range":"404","text":"390"},{"range":"404","text":"391"},{"range":"405","text":"390"},{"range":"405","text":"391"},{"range":"406","text":"390"},{"range":"406","text":"391"},{"range":"407","text":"390"},{"range":"407","text":"391"},{"range":"408","text":"390"},{"range":"408","text":"391"},{"range":"409","text":"390"},{"range":"409","text":"391"},{"range":"410","text":"390"},{"range":"410","text":"391"},{"range":"411","text":"390"},{"range":"411","text":"391"},{"range":"412","text":"390"},{"range":"412","text":"391"},{"range":"413","text":"390"},{"range":"413","text":"391"},{"range":"414","text":"390"},{"range":"414","text":"391"},{"range":"415","text":"390"},{"range":"415","text":"391"},{"range":"416","text":"390"},{"range":"416","text":"391"},{"range":"417","text":"390"},{"range":"417","text":"391"},{"range":"418","text":"390"},{"range":"418","text":"391"},{"range":"419","text":"390"},{"range":"419","text":"391"},{"range":"420","text":"390"},{"range":"420","text":"391"},{"range":"421","text":"390"},{"range":"421","text":"391"},{"range":"422","text":"390"},{"range":"422","text":"391"},{"range":"423","text":"390"},{"range":"423","text":"391"},{"range":"424","text":"390"},{"range":"424","text":"391"},{"range":"425","text":"390"},{"range":"425","text":"391"},[965,968],"unknown","never",[2887,2890],[2934,2935],"?",[2967,2970],[3225,3228],[3275,3276],[3323,3326],[3505,3508],[3555,3556],[3603,3606],[1552,1555],[11195,11198],[11690,11693],[13929,13932],[222,225],[263,266],[754,757],[1261,1264],[1775,1778],[2270,2273],[2785,2788],[3269,3272],[3757,3760],[361,364],[916,919],[1403,1406],[1855,1858],[255,258],[256,259],[407,410],[511,514],[855,858],[1263,1266],[2078,2081]]