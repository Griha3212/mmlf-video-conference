[{"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx":"1","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx":"2","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts":"3","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx":"4","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx":"5","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx":"6","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx":"7","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx":"8","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts":"9","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts":"10","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts":"11","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts":"12","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts":"13","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts":"14","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts":"15","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts":"16","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts":"17","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx":"18","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts":"19","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx":"20","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx":"21","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx":"22","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts":"23","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts":"24","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts":"25","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts":"26","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\capitalizeFirstLetter.helper.ts":"27","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts":"28"},{"size":462,"mtime":1611896918476,"results":"29","hashOfConfig":"30"},{"size":999,"mtime":1611219535180,"results":"31","hashOfConfig":"30"},{"size":88,"mtime":1609151476043,"results":"32","hashOfConfig":"30"},{"size":1360,"mtime":1611588354280,"results":"33","hashOfConfig":"30"},{"size":4843,"mtime":1610437764729,"results":"34","hashOfConfig":"30"},{"size":8065,"mtime":1611654867557,"results":"35","hashOfConfig":"30"},{"size":8983,"mtime":1612364205005,"results":"36","hashOfConfig":"30"},{"size":22873,"mtime":1612868249850,"results":"37","hashOfConfig":"30"},{"size":845,"mtime":1609924589133,"results":"38","hashOfConfig":"30"},{"size":1409,"mtime":1611245672776,"results":"39","hashOfConfig":"30"},{"size":1461,"mtime":1612364228958,"results":"40","hashOfConfig":"30"},{"size":816,"mtime":1611588730436,"results":"41","hashOfConfig":"30"},{"size":355,"mtime":1611587774795,"results":"42","hashOfConfig":"30"},{"size":433,"mtime":1609754100539,"results":"43","hashOfConfig":"30"},{"size":3599,"mtime":1611590733718,"results":"44","hashOfConfig":"30"},{"size":2161,"mtime":1611749738661,"results":"45","hashOfConfig":"30"},{"size":551,"mtime":1611587442270,"results":"46","hashOfConfig":"30"},{"size":360,"mtime":1609927664710,"results":"47","hashOfConfig":"30"},{"size":14464,"mtime":1612469386967,"results":"48","hashOfConfig":"30"},{"size":1132,"mtime":1612189320479,"results":"49","hashOfConfig":"30"},{"size":10069,"mtime":1612858186202,"results":"50","hashOfConfig":"30"},{"size":13223,"mtime":1612788407718,"results":"51","hashOfConfig":"30"},{"size":792,"mtime":1611739960283,"results":"52","hashOfConfig":"30"},{"size":474,"mtime":1609927609396,"results":"53","hashOfConfig":"30"},{"size":304,"mtime":1612189320481,"results":"54","hashOfConfig":"30"},{"size":13381,"mtime":1612445142032,"results":"55","hashOfConfig":"30"},{"size":182,"mtime":1612786184832,"results":"56","hashOfConfig":"30"},{"size":9448,"mtime":1612466582641,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"vtgqsx",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\index.tsx",[],["127","128","129","130","131","132"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\App.tsx",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\history.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ProtectedRoutes\\ProtectedRoutes.tsx",["133","134","135"],"import React, {\r\n  FC, memo, useState,\r\n} from 'react';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport AdminPage from '../Admin/AdminPage';\r\n\r\n// import LoadingPage from '../../components/LoadingPage/LoadingPage';\r\nimport ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport { parseToken } from '../../utils/parseToken';\r\nimport LoginPage from '../Login/LoginPage';\r\nimport UserPage from '../User/UserPage';\r\n\r\nexport const ProtectedRoutes: FC = () => {\r\n  const [isAuth, setIsAuth] = useState(!!getLocalStorageData().token.accessToken);\r\n  if (!isAuth) return <Redirect to=\"/signin\" />;\r\n  const { token } = getLocalStorageData();\r\n\r\n  const [userData, setUserData] = useState(parseToken(token.accessToken as string));\r\n\r\n  if (userData.isAdmin) return <Redirect to=\"/admin\" />;\r\n  if (userData.hasAccessToStatisticPage) return <Redirect to=\"/stats\" />;\r\n  if (!userData.isAdmin) return <Redirect to=\"/user\" />;\r\n\r\n  // }\r\n\r\n  return (\r\n\r\n    <ContentContainer>\r\n      <Switch>\r\n        {(!userData?.isAdmin) && <Route path=\"/user\" component={UserPage} />}\r\n        {(userData?.isAdmin) && <Route path=\"/admin\" component={AdminPage} />}\r\n      </Switch>\r\n    </ContentContainer>\r\n  );\r\n};\r\n\r\nexport default memo(ProtectedRoutes);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\LoginPage.tsx",["136","137","138","139"],"import React, {\n  FC, memo, useState,\n  ChangeEvent,\n} from 'react';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useForm, Controller } from 'react-hook-form';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  useLocation, Prompt, useHistory,\n} from 'react-router-dom';\nimport useStyles from './style';\nimport { apiLogin } from '../../api/login';\n\ntype FormData = {\n  loginCode: string;\n};\n\ninterface Props {\n  onSubmit: (data: FormData) => void;\n\n}\n\nfunction Alert(props: any) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst LoginPage: FC = () => {\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError]: [string, (error: string) => void] = useState('');\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  const {\n    handleSubmit,\n    control, errors: fieldsErrors,\n  } = useForm<FormData>();\n  const onSubmit = async (data: FormData) => {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n    }\n    const response = await apiLogin(data.loginCode);\n\n    if (response && response.status === 404) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 400) {\n      setError('Ошибка');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (!response) {\n      setError('Нет соединения');\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n\n    if (response && response.status === 500) {\n      setError(`${response.data}`);\n      setOpen(true);\n      setSuccess(false);\n      setLoading(false);\n    }\n    if (response && response.token && response.refreshToken) {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      setSuccess(true);\n      setLoading(false);\n      history.push('/user');\n    }\n  };\n\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    await setOpen(false);\n  };\n\n  return (\n\n    <Container component=\"main\" maxWidth=\"xs\">\n\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Вход\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            name=\"loginCode\"\n            as={(\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                id=\"loginCode\"\n                label=\"Полученный код\"\n                autoFocus\n              // error={!!fieldsErrors.loginCode?.message}\n              // helperText={fieldsErrors.loginCode ? fieldsErrors.loginCode.message : null}\n              />\n            )}\n            control={control}\n            defaultValue=\"\"\n            rules={{\n              required: 'Введите пожалуйста код',\n              // pattern: {\n              //   value: /^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]+$/i,\n              //   message: 'Incorrect value',\n              // },\n            }}\n          />\n          {fieldsErrors.loginCode && <Typography variant=\"caption\" color=\"error\">{fieldsErrors.loginCode.message}</Typography>}\n          <div className={classes.wrapper}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              // className={classes.submit}\n              className={buttonClassname}\n              disabled={loading}\n            >\n              Войти\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n          </div>\n        </form>\n      </div>\n    </Container>\n\n  );\n};\n\nexport default memo(LoginPage);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\StatsPage.tsx",["140","141","142","143","144","145","146"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { apiGetStats } from '../../api/stats';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport parseToken from '../../utils/parseToken';\r\nimport useStyles from './style';\r\n\r\ntype User = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  lastName: string;\r\n  email: string;\r\n\r\n};\r\n\r\ntype Vote = {\r\n  rate: number;\r\n  user: User;\r\n  createdAt: Date;\r\n};\r\n\r\ntype DataForStats = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n  usersWhoWatchedSpeaker: Array<User>;\r\n  usersWhoSendContacts: Array<User>;\r\n  votes: Array<Vote>;\r\n\r\n};\r\n\r\nconst StatsPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [dataForStatsViewer, setDataForStatsViewer] = useState<DataForStats[]>();\r\n\r\n  const loadDataForStatsViewer = async () => {\r\n    const response = await apiGetStats(userData.id, token);\r\n    setDataForStatsViewer(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForStatsViewer();\r\n  }, []);\r\n\r\n  const Row = (props: { row: DataForStats }) => {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    let sum = 0;\r\n\r\n    row.votes.map((element) => {\r\n      sum += element.rate;\r\n    });\r\n\r\n    const medianValue = (+sum / +row.votes.length || 0).toFixed(2);\r\n\r\n    const renderRate = (historyRow: any) => {\r\n      const currentRate = row && row!.votes.find(\r\n        (element: any) => element.user.id === historyRow.id,\r\n      );\r\n\r\n      if (currentRate && currentRate.createdAt && !currentRate.rate) return '0';\r\n      return currentRate && currentRate.rate || 'без оценки';\r\n    };\r\n\r\n    const renderContactCheckbox = (historyRow: any) => {\r\n      console.log('row :>> ', row);\r\n\r\n      const currentContact = row && row!.usersWhoSendContacts.find(\r\n        (element: any) => element.id === historyRow.id,\r\n      );\r\n\r\n      if (currentContact) return true;\r\n\r\n      return false;\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <TableRow className={classes.root}>\r\n          <TableCell align=\"center\">\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n            {`${row.firstName} ${row.lastName}`}\r\n          </TableCell>\r\n          <TableCell align=\"center\">{row.usersWhoWatchedSpeaker.length}</TableCell>\r\n          <TableCell align=\"center\">{row.votes.length}</TableCell>\r\n          <TableCell align=\"center\">{medianValue}</TableCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  Подробнее\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\">Имя Фамилия участника</TableCell>\r\n                      <TableCell align=\"center\">Просмотрел</TableCell>\r\n                      <TableCell align=\"center\">Хочет отправить контакты</TableCell>\r\n                      <TableCell align=\"center\">Email</TableCell>\r\n                      <TableCell align=\"center\">Оценка</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {row.usersWhoWatchedSpeaker.map((historyRow) => (\r\n                      <TableRow key={historyRow.id}>\r\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                          {`${historyRow.firstName} ${historyRow.lastName}`}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Checkbox\r\n                            defaultChecked\r\n                            color=\"primary\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Checkbox\r\n                            checked={renderContactCheckbox(historyRow)}\r\n                            color=\"primary\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{`${historyRow.email || '-'}`}</TableCell>\r\n                        <TableCell align=\"center\">{renderRate(historyRow)}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className={classes.pageNameContainer} component=\"main\" maxWidth=\"xs\">\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Просмотра Статистики\r\n          </Typography>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <div className={classes.root}>\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell />\r\n                <TableCell align=\"center\">Имя Фамилия спикера</TableCell>\r\n                <TableCell align=\"center\">Количество просмотров</TableCell>\r\n                <TableCell align=\"center\">Количество оценок</TableCell>\r\n                <TableCell align=\"center\">Средняя оценка</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {dataForStatsViewer && dataForStatsViewer.map((row) => (\r\n                <Row key={row.id} row={row} />\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(StatsPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\AdminPage.tsx",["147"],"/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable @typescript-eslint/ban-types */\r\nimport React, {\r\n  FC, memo, useState, useEffect,\r\n  ChangeEvent,\r\n} from 'react';\r\n\r\n// import ContentContainer from '../ContentContainer/ContentContainer';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport useStyles from './style';\r\nimport { apiGetUser } from '../../api/user';\r\nimport parseToken from '../../utils/parseToken';\r\nimport getLocalStorageData from '../../utils/helpers/localStorage.helper';\r\nimport {\r\n  apiChangeActiveSpeakerInChannel, apiDisableLogistOfTheYearSession,\r\n  apiSetBrakeInChannel, apiSetLogistOfTheYearSession,\r\n} from '../../api/admin';\r\n\r\ntype Speaker = {\r\n\r\n  company: string;\r\n  firstName: string;\r\n  id: number;\r\n  innerSystemName: string;\r\n  isModerator: boolean;\r\n  lastName: string;\r\n  linkToImg: string;\r\n  linkToPresentation: string;\r\n  linkToZoom: string;\r\n  topicName: string;\r\n\r\n};\r\n\r\ntype DataForAdmin = {\r\n\r\n  channelAdminInfo: {\r\n    number: number,\r\n  }\r\n\r\n  foundAllSessionsInAdminChannel: Array<Session>\r\n\r\n};\r\n\r\nfunction Alert(props: any) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ntype Session = {\r\n\r\n  description: string;\r\n  id: number;\r\n  letter: string;\r\n  name: string;\r\n  nextSessionDescription: string;\r\n  nextSessionLetter: string;\r\n  speakers: Array<Speaker>;\r\n  voteFoAllSession: boolean;\r\n\r\n};\r\n\r\nconst AdminPage: FC = () => {\r\n  const classes = useStyles();\r\n  const { token } = getLocalStorageData();\r\n  const [userData] = useState(parseToken(token.accessToken as string));\r\n\r\n  const [error]: [string, (error: string) => void] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [activeSpeaker, setActiveSpeaker] = useState('');\r\n\r\n  const [selectedSpeakerToActivate, setSelectedSpeakerToActivate] = useState('');\r\n\r\n  const [dataForAdmin, setDataForAdmin] = useState<DataForAdmin>();\r\n  const [activeButtonId, setActiveButtonId] = useState<number | undefined>();\r\n\r\n  const loadDataForAdmin = async () => {\r\n    const response = await apiGetUser(userData.id, token);\r\n    setDataForAdmin(response);\r\n\r\n    if (response && response.channelAdminInfo && response.channelAdminInfo.activeSpeaker) {\r\n      setActiveSpeaker(`${response.channelAdminInfo.activeSpeaker.lastName} ${response.channelAdminInfo.activeSpeaker.firstName}`);\r\n      setActiveButtonId(response.channelAdminInfo.activeSpeaker.id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDataForAdmin();\r\n  }, []);\r\n\r\n  const handleClose = async (event: ChangeEvent<unknown>, reason: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    await setOpen(false);\r\n  };\r\n\r\n  const activateSelectedSpeaker = async (speakerId: string) => {\r\n    const response = await apiChangeActiveSpeakerInChannel(\r\n      token,\r\n      Number(speakerId),\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n    );\r\n\r\n    setActiveSpeaker(`${response.lastName} ${response.firstName}`);\r\n  };\r\n\r\n  const setBreakBetweenSessions = async () => {\r\n    await apiSetBrakeInChannel(\r\n      token,\r\n      Number(dataForAdmin && dataForAdmin.channelAdminInfo.number),\r\n      Number(activeButtonId),\r\n    );\r\n    setActiveSpeaker('');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const setLogistOfTheYearSession = async () => {\r\n    await apiSetLogistOfTheYearSession(\r\n      token,\r\n    );\r\n    setActiveSpeaker('Логист Года активирован');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const disableLogistOfTheYearSession = async () => {\r\n    await apiDisableLogistOfTheYearSession(\r\n      token,\r\n    );\r\n    setActiveSpeaker('');\r\n    setActiveButtonId(undefined);\r\n  };\r\n\r\n  const renderSpeakersDataForAdmin = (element: Speaker) => {\r\n    if (!element.isModerator) {\r\n      return (\r\n\r\n        <Grid container xs={12} justify=\"center\">\r\n          <Button\r\n            onClick={(e) => {\r\n              setSelectedSpeakerToActivate(e.currentTarget.value);\r\n              setActiveButtonId(Number(e.currentTarget.value));\r\n            }}\r\n            value={element.id}\r\n            data-id=\"\"\r\n            className={activeButtonId === element.id ?\r\n              classes.speakerButtonActive : classes.speakerButton}\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n          >\r\n            {`${element.lastName}  ${element.firstName}`}\r\n          </Button>\r\n        </Grid>\r\n\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n        <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Страница Администратора\r\n          </Typography>\r\n          <p className={classes.sessionLetter}>\r\n            Канал №\r\n            {dataForAdmin && String(dataForAdmin.channelAdminInfo.number)}\r\n          </p>\r\n\r\n        </div>\r\n\r\n      </Container>\r\n\r\n      <Grid container justify=\"space-around\">\r\n\r\n        <Grid item xs={4}>\r\n\r\n          {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (session: Session) => (\r\n                <>\r\n\r\n                  {session.letter === 'Экскурсия' ? <p className={classes.sessionLetter}>{session.description}</p> : (\r\n                    <p className={classes.sessionLetter}>\r\n                      {session.letter}\r\n                    </p>\r\n                  )}\r\n                  <p>\r\n                    {session.speakers.map(\r\n                      (speaker: Speaker) => renderSpeakersDataForAdmin(speaker),\r\n                    )}\r\n                  </p>\r\n                </>\r\n              ),\r\n            )\r\n          }\r\n\r\n          {/* {\r\n            dataForAdmin && dataForAdmin.foundAllSessionsInAdminChannel.map(\r\n              (element: Session) => renderSpeakersDataForAdmin(element),\r\n            )\r\n          } */}\r\n        </Grid>\r\n\r\n        <Grid item justify=\"center\" xs={4}>\r\n          <div className={classes.stickyCentralMenu}>\r\n            <p className={`${classes.textCenter} ${classes.activateSelectedSpeakerP}`}>\r\n              <Button\r\n                className={classes.speakerButton}\r\n                onClick={() => activateSelectedSpeaker(selectedSpeakerToActivate)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Активировать выбранного спикера\r\n\r\n              </Button>\r\n            </p>\r\n\r\n            <p className={classes.textCenter}>\r\n              <Button\r\n                className={classes.speakerButtonBigMargin}\r\n                onClick={() => setBreakBetweenSessions()}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Активировать перерыв\r\n\r\n              </Button>\r\n            </p>\r\n\r\n            {dataForAdmin && dataForAdmin.channelAdminInfo.number === 1 ? (\r\n              <p className={classes.textCenter}>\r\n                <Button\r\n                  className={classes.speakerButton}\r\n                  onClick={() => setLogistOfTheYearSession()}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Активировать награждение Логист Года\r\n\r\n                </Button>\r\n              </p>\r\n            ) : null}\r\n\r\n            {dataForAdmin && dataForAdmin.channelAdminInfo.number === 1 ? (\r\n              <p className={classes.textCenter}>\r\n                <Button\r\n                  className={classes.speakerButton}\r\n                  onClick={() => disableLogistOfTheYearSession()}\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Деактивировать награждение Логист Года\r\n\r\n                </Button>\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <p className={classes.activeSpeakerText}>\r\n            Активный спикер:\r\n            {' '}\r\n            {`${activeSpeaker}`}\r\n          </p>\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(AdminPage);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\UserPage.tsx",["148","149","150"],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Login\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Stats\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\Admin\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\parseToken.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\localStorage.helper.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\login.ts",["151"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\n// Login\nexport const apiLogin = async (\n  loginCode: string,\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.login}`;\n\n  try {\n    const { data } = await axios.post(url, { loginCode });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\user.ts",["152","153","154","155","156","157","158"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n\n// Login\nexport const apiGetUser = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getUser}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiVoteForSpeaker = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  rate: number | null,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.voteForSpeaker}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId, rate }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakers = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakers}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateContactedSpeakers = async (\n  speakerId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateContactedSpeakers}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserUpdateWatchedSpeakersAllInSession = async (\n  sessionId: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.userUpdateWatchedSpeakersAll}`;\n\n  try {\n    const { data } = await axios.post(url, { sessionId, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiGetAllChannels = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getAllChannels}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiUserChangeActiveChannel = async (\n  channelNumber: number,\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelNumber, userId }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\admin.ts",["159","160","161","162"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n// import request from './apiRequest';\n\nexport const apiChangeActiveSpeakerInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  speakerIdToActivate: number,\n  channelForShowingNumber: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.changeActiveSpeakerInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { speakerIdToActivate, channelForShowingNumber }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiSetBrakeInChannel = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n  channelForShowingNumber: number,\n  prevSpeakerid: number,\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.setBrakeInChannel}`;\n\n  try {\n    const { data } = await axios.post(url, { channelForShowingNumber, prevSpeakerid }, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiSetLogistOfTheYearSession = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.setLogistOfTheYear}`;\n\n  try {\n    const { data } = await axios.post(url, {}, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n\nexport const apiDisableLogistOfTheYearSession = async (\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.disableLogistOfTheYear}`;\n\n  try {\n    const { data } = await axios.post(url, {}, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\api\\stats.ts",["163"],"/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport api from '../core/api';\n\nexport const apiGetStats = async (\n  userId: number,\n  token: {\n    accessToken: string | null;\n    refreshToken: string | null;\n  },\n\n): Promise<any> => {\n  const url = `${process.env.REACT_APP_API_URL}${api.getStats}${userId}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${token.accessToken}`,\n      },\n    });\n    return data;\n  } catch (error) {\n    return error.response;\n  }\n};\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\ContentContainer.tsx",["164"],"import React, { FC } from 'react';\r\nimport { Hidden } from '@material-ui/core';\r\nimport useStyles from './style';\r\n\r\nexport const ContentContainer: FC = ({ children }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n\r\n      <div className={classes.container}>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentContainer;\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\User\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\VideoPlayerMain.tsx",["165","166","167","168","169","170","171","172"],"import React, { memo, useState } from 'react';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport Iframe from 'react-iframe';\r\nimport { createPortal } from 'react-dom';\r\nimport useStyles from './style';\r\n\r\nconst VideoPlayerMain = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  const [contentRef, setContentRef] = useState(null);\r\n  const mountNode = contentRef;\r\n  const inputRef: any = React.useRef<HTMLInputElement>(null); // note the passed in `null` arg\r\n\r\n  const playVideo = (): any => {\r\n\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      data-testid=\"loading-page\"\r\n    >\r\n      <div\r\n        className={props.classNameInner}\r\n        ref={inputRef}\r\n      >\r\n        <Iframe\r\n          // test url https://facecast.net/v/pybh3r?nolabel&noanimation&autorun=true&t=30\r\n          url={props.videoURL}\r\n          width=\"100%\"\r\n          height={props.height}\r\n          position=\"relative\"\r\n          allow=\"fullscreen\"\r\n          onLoad={playVideo()}\r\n        />\r\n      </div>\r\n    </Grid>\r\n\r\n  );\r\n};\r\n\r\nexport default memo(VideoPlayerMain);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\SessionInfoBlock.tsx",["173","174","175"],"/* eslint-disable no-lone-blocks */\nimport React, { memo, useEffect } from 'react';\nimport {\n  Grid, Typography, Button,\n} from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Rating from '@material-ui/lab/Rating';\nimport useStyles from './style';\nimport noAvatar from '../../img/speakersImg/noAvatar.svg';\nimport { apiUserUpdateContactedSpeakers, apiVoteForSpeaker } from '../../api/user';\nimport { capitalizeFirstLetter } from '../../utils/helpers/capitalizeFirstLetter.helper';\n\nconst SessionInfoBlock = (props: any) => {\n  const {\n    currentSpeakerInfo, currentSpeakerRate, currentUserData,\n  } = props;\n\n  const classes = useStyles();\n  const [rate, setRate] = React.useState<number | null>(currentSpeakerRate || 0);\n  const [closedAccess, setClosedAccess] = React.useState(true);\n\n  // check timers logic-----------------------------------------------\n  useEffect(() => {\n    setRate(currentSpeakerRate);\n  }, [currentSpeakerRate]);\n\n  useEffect(() => {\n    setClosedAccess(true);\n\n    const currentSpeakerLocalStorageData = localStorage.getItem(\n      `${String(currentSpeakerInfo && currentSpeakerInfo.id)}`,\n    );\n\n    if (currentSpeakerLocalStorageData === 'viewed') {\n      setClosedAccess(false);\n    }\n  }, [currentSpeakerInfo]);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     if (isVisible) {\n  //       if (currentSpeakerInfo) {\n  //         const currentSpeakerLocalStorageData = localStorage.getItem(\n  //           `${String(currentSpeakerInfo && currentSpeakerInfo.id)}`,\n  //         );\n\n  //         if (currentSpeakerLocalStorageData === 'viewed') {\n  //           setClosedAccess(false);\n  //         } else {\n  //           setClosedAccess(true);\n  //         }\n  //       }\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(interval);\n  // }, [currentSpeakerInfo]);\n\n  //-------------------------------------------------------------------\n\n  const sendVoteForSpeaker = async (rateDirectlyFromUI: number | null) => {\n    await apiVoteForSpeaker(\n      props.currentSpeakerInfo.id,\n      props.userId,\n      props.token,\n      rateDirectlyFromUI,\n    );\n  };\n\n  const renderSpeakersRate = () => {\n    if (currentSpeakerRate) {\n      return currentSpeakerRate;\n    } else return 0;\n  };\n\n  const renderSessionLetter = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return currentUserData.channelUserInfo.startChannelSessionLetter;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        return currentUserData.channelUserInfo.activeSession.nextSessionLetter;\n      }\n\n      if (props.currentSessionLetter) {\n        return props.currentSessionLetter;\n      } else return 'Сессия #';\n    } else return 'Сессия #';\n  };\n\n  const renderSessionDescription = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        if (currentUserData.channelUserInfo.number === 1) {\n          return 'Вступительное слово Оргкомитета Форума';\n        }\n\n        return `Перерыв... Скоро здесь начнётся сессия: ${currentUserData.channelUserInfo.startChannelSessionDescription}`;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession && currentUserData.channelUserInfo.break) {\n        if (currentUserData.channelUserInfo.activeSession.name === 'LogistOfTheYear') {\n          return 'Завтра здесь будут проходить Онлайн-экскурсии на крупнейшие логистические объекты';\n        }\n        return `Перерыв... Скоро здесь начнётся сессия: ${currentUserData.channelUserInfo.activeSession.nextSessionDescription}`;\n      }\n\n      if (props.currentSessionDescription) {\n        return props.currentSessionDescription;\n      } else return 'Сессия #';\n    } else return 'Сессия #';\n  };\n\n  const showSecondBlock = () => {\n    if (currentUserData) {\n      if (!currentUserData.channelUserInfo.activeSession) {\n        if (currentUserData.channelUserInfo.number === 1) {\n          return false;\n        }\n        return true;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession &&\n        currentUserData.channelUserInfo.activeSession &&\n        currentUserData.channelUserInfo.activeSession.name === 'LogistOfTheYear') {\n        return false;\n      }\n\n      if (currentUserData.channelUserInfo.activeSession &&\n        !currentUserData.channelUserInfo.activeSession.voteFoAllSession) {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  };\n\n  const sendContacts = async () => {\n    await apiUserUpdateContactedSpeakers(\n      props.currentSpeakerInfo.id,\n      props.userId,\n      props.token,\n    );\n  };\n\n  const checkAlreadySentContact = () => {\n    if (currentUserData && currentUserData.foundUser &&\n      currentUserData.foundUser.speakersToWhomContactsWereSent) {\n      const foundContactedSpeakers = currentUserData.foundUser.speakersToWhomContactsWereSent.find(\n        (speaker: any) => speaker.id === props.currentSpeakerInfo.id,\n      );\n\n      if (foundContactedSpeakers) {\n        return true;\n      } else {\n        return false;\n      }\n    } else return false;\n  };\n\n  return (\n    <>\n      {currentUserData && currentUserData.channelUserInfo.activeSession &&\n        currentUserData.channelUserInfo.activeSession.isSessionForSecondDay ? null : (\n          <Grid item container className={classes.darkBlueBckg}>\n            <Grid item xs={12}>\n              <p className={renderSessionLetter().length > 10\n                ? classes.sessionLetterTextLong : classes.sessionLetterText}\n              >\n                {renderSessionLetter()}\n              </p>\n\n            </Grid>\n\n            <p className={classes.sessionNameText}>\n              {renderSessionDescription()}\n            </p>\n\n          </Grid>\n        )}\n\n      {showSecondBlock() ? (\n        <Grid item container justify=\"space-between\" className={classes.lightBlueBckg}>\n\n          <Grid item className={classes.speakerInfoBlock} sm={7} xl={8} lg={8} xs={12}>\n            <p className={classes.speakerTheme}>\n              {currentSpeakerInfo && currentSpeakerInfo.topicName || 'Тема доклада'}\n            </p>\n\n            <Grid container spacing={5}>\n\n              <Grid item xs={4} sm={4} xl={2} lg={2}>\n                <img className={classes.speakerAvatarImg} width=\"100%\" src={currentSpeakerInfo && currentSpeakerInfo.linkToImg || noAvatar} alt=\"\" />\n\n              </Grid>\n              <Grid className={classes.noLeftPadding} item xs={8} sm={7} xl={8} lg={8}>\n                <p className={classes.speakerHeaderText}>Спикер</p>\n                <p className={classes.speakerFullNameText}>\n                  {`${currentSpeakerInfo\n                    && currentSpeakerInfo.firstName || 'Имя'} ${currentSpeakerInfo\n                    && capitalizeFirstLetter(currentSpeakerInfo.lastName) || 'Фамилия'} `}\n\n                </p>\n                <p className={classes.speakerFullCompanyText}>\n                  {`${currentSpeakerInfo\n                    && currentSpeakerInfo.statusInCompany || 'должность'}, ${currentSpeakerInfo\n                    && currentSpeakerInfo.company || 'Компания'}`}\n                </p>\n              </Grid>\n            </Grid>\n\n          </Grid>\n\n          <Grid item xs={12} sm={5} md={4} lg={3} xl={3}>\n\n            <div className={classes.textCenter}>\n              <Box component=\"fieldset\" mb={1} borderColor=\"transparent\">\n                <Typography className={classes.rateSpeakerText} component=\"legend\">Оцените выступление</Typography>\n                <Rating\n                  classes={{ iconEmpty: 'rateBigDefault' }}\n                  className={classes.rateSpeakerStarsImg}\n                  name=\"simple-controlled\"\n                  value={renderSpeakersRate()}\n                  disabled={closedAccess}\n                  onChange={async (event, newValue) => {\n                    setRate(newValue);\n                    sendVoteForSpeaker(newValue);\n                  }}\n                />\n              </Box>\n            </div>\n\n            <p className={classes.textCenter}>\n              <Button\n                disabled={closedAccess}\n                onClick={() => window.open(`${currentSpeakerInfo && currentSpeakerInfo.linkToPresentation}`, '_blank')}\n                className={classes.loadPresenationButton}\n              >\n                Скачать презентацию\n\n              </Button>\n            </p>\n\n            {\n              currentSpeakerInfo && currentSpeakerInfo.linkToZoom ? (\n                <p className={classes.textCenter}>\n                  <Button\n                    disabled={closedAccess}\n                    onClick={() => window.open(`${currentSpeakerInfo && currentSpeakerInfo.linkToZoom}`, '_blank')}\n                    className={classes.goToZoomButton}\n                  >\n                    Перейти в Zoom\n\n                  </Button>\n                </p>\n              ) : null\n            }\n\n            {\n              currentSpeakerInfo && currentSpeakerInfo.hasSendContactsButton ? (\n                <p className={classes.textCenter}>\n                  <Button\n                    disabled={closedAccess}\n                    onClick={() => sendContacts()}\n                    className={checkAlreadySentContact()\n                      ? classes.sendContactsButtonDisabled : classes.sendContactsButton}\n                  >\n                    {checkAlreadySentContact() ? 'Контакты отправлены' : 'Поделиться контактами'}\n\n                  </Button>\n                </p>\n              ) : null\n            }\n\n          </Grid>\n\n        </Grid>\n      )\n        : null}\n\n    </>\n  );\n};\n\nexport default memo(SessionInfoBlock);\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\SpeakersSessionInfoBlock.tsx",["176","177","178"],"/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable array-callback-return */\r\nimport React, { memo, useEffect } from 'react';\r\nimport {\r\n  Grid, Hidden,\r\n} from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Rating from '@material-ui/lab/Rating';\r\n// import { useEffect } from 'react';\r\nimport useStyles from './style';\r\nimport noAvatar from '../../img/speakersImg/noAvatar.svg';\r\nimport PDF from '../../img/pdf_icon.svg';\r\nimport Zoom from '../../img/zoom_icon.svg';\r\nimport ShareContacts from '../../img/contact_icon.svg';\r\nimport PDFDisabled from '../../img/pdf_icon_disabled.svg';\r\nimport ZoomDisabled from '../../img/zoom_icon_disabled.svg';\r\nimport ShareContactsDisabled from '../../img/contact_icon_disabled.svg';\r\nimport ShareContactsCompleted from '../../img/contact_icon_completed.svg';\r\nimport { apiUserUpdateContactedSpeakers, apiVoteForSpeaker } from '../../api/user';\r\nimport { capitalizeFirstLetter } from '../../utils/helpers/capitalizeFirstLetter.helper';\r\nimport { Vote, Speaker } from '../../interfaces/allInterfaces';\r\n\r\nconst SpeakersSessionInfoBlock = (props: any) => {\r\n  const classes = useStyles();\r\n  const [value] = React.useState<number | null>(5);\r\n\r\n  const {\r\n    currentModeratorInfo,\r\n    currentSessionSpeakersInfo,\r\n    currentSessionSpeakersAllRates,\r\n    currentUserData,\r\n\r\n  } = props;\r\n\r\n  // const [currentSessionSpeakersAllRatesState,\r\n  //   setCurrentSessionSpeakersAllRatesState] =\r\n  //   React.useState<Vote[]>(currentSessionSpeakersAllRates);\r\n\r\n  // useEffect(() => {\r\n  //   setCurrentSessionSpeakersAllRatesState(currentSessionSpeakersAllRates);\r\n  // }, [currentSessionSpeakersAllRates]);\r\n\r\n  const checkIsWatched = (speakerId: number) => {\r\n    if (currentUserData && currentUserData.foundUser && currentUserData.foundUser.watchedSpeakers) {\r\n      const foundWtchedSpeaker = currentUserData.foundUser.watchedSpeakers.find(\r\n        (speaker: any) => speaker.id === speakerId,\r\n      );\r\n\r\n      if (foundWtchedSpeaker) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } else return true;\r\n  };\r\n\r\n  const checkIsWatchedAndSent = (speakerId: number, type: string) => {\r\n    if (currentUserData && currentUserData.foundUser && currentUserData.foundUser.watchedSpeakers) {\r\n      const foundWtchedSpeaker = currentUserData.foundUser.watchedSpeakers.find(\r\n        (speaker: Speaker) => speaker.id === speakerId,\r\n      );\r\n\r\n      if (foundWtchedSpeaker) {\r\n        if (currentUserData && currentUserData.foundUser &&\r\n          currentUserData.foundUser.speakersToWhomContactsWereSent) {\r\n          const foundContactedSpeakers = currentUserData.foundUser\r\n            .speakersToWhomContactsWereSent.find(\r\n              (speaker: Speaker) => speaker.id === speakerId,\r\n            );\r\n\r\n          if (foundContactedSpeakers) {\r\n            return type === 'src' ? ShareContactsCompleted : `${classes.sendContactsImg} ${classes.disabledImg}`;\r\n          } else {\r\n            return type === 'src' ? ShareContacts : `${classes.sendContactsImg} ${classes.pointerImg}`;\r\n          }\r\n        } else return type === 'src' ? ShareContacts : `${classes.sendContactsImg} ${classes.pointerImg}`;\r\n      } else {\r\n        return type === 'src' ? ShareContactsDisabled : `${classes.sendContactsImg} ${classes.disabledImg}`;\r\n      }\r\n    } else return type === 'src' ? ShareContactsDisabled : `${classes.sendContactsImg} ${classes.disabledImg}`;\r\n  };\r\n\r\n  const renderSpeakersRates = (element: Speaker) => {\r\n    if (currentSessionSpeakersAllRates) {\r\n      if (currentSessionSpeakersAllRates.length > 0) {\r\n        const foundRate = currentSessionSpeakersAllRates.find(\r\n          (vote: Vote) => vote.speaker.id === element.id,\r\n        );\r\n\r\n        if (foundRate) {\r\n          return foundRate.rate;\r\n        } else return 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderMockedSessionSpeakers = () => {\r\n    const arrayOfMockedSpeakers = [];\r\n    for (let index = 0; index < 5; index += 1) {\r\n      arrayOfMockedSpeakers.push(\r\n        <Grid xs={12} lg={2} xl={2} item className={classes.singleSpeakerBlock}>\r\n\r\n          <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n            <img className={classes.speakerAvatarInsideSession} src={noAvatar} alt=\"\" />\r\n          </p>\r\n          <p className={classes.speakerNameInsideSession}>Имя</p>\r\n          <p className={classes.speakerNameInsideSession}>Фамилия</p>\r\n\r\n          <p className={classes.textCenter}>\r\n            <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n              <Rating className={classes.smallScoreStarImg} name=\"read-only\" value={value} readOnly />\r\n            </Box>\r\n          </p>\r\n\r\n          <Grid xs={8} lg={12} xl={10} item container className={classes.mxAuto} justify=\"space-around\">\r\n            <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n              <img className={`${classes.pointerImg} ${classes.loadPDFImg}`} src={PDF} alt=\"\" />\r\n            </Grid>\r\n\r\n            <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n              <img className={`${classes.pointerImg} ${classes.loadZoomImg}`} src={Zoom} alt=\"\" />\r\n            </Grid>\r\n\r\n            <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n              <img className={`${classes.pointerImg} ${classes.sendContactsImg}`} src={ShareContacts} alt=\"\" />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>,\r\n      );\r\n    }\r\n    return arrayOfMockedSpeakers;\r\n  };\r\n\r\n  const sendVoteForSpeaker = async (\r\n    rateDirectlyFromUI: number | null,\r\n    currentSpeakerId: number,\r\n  ) => {\r\n    await apiVoteForSpeaker(\r\n      currentSpeakerId,\r\n      props.userId,\r\n      props.token,\r\n      rateDirectlyFromUI,\r\n    );\r\n  };\r\n\r\n  const sendContacts = async (currentSpeakerId: number) => {\r\n    await apiUserUpdateContactedSpeakers(\r\n      currentSpeakerId,\r\n      props.userId,\r\n      props.token,\r\n    );\r\n  };\r\n\r\n  const renderSessionSpeakers = () => (\r\n\r\n    currentSessionSpeakersInfo.map((element: Speaker) => {\r\n      if (!element.isModerator) {\r\n        return (\r\n          <>\r\n            <Grid className={classes.singleSpeakerBlock} sm={6} md={2} xs={12} lg={2} xl={2} item>\r\n\r\n              <p className={classes.speakerAvatarInsideSessionParagraph}>\r\n                <img className={classes.speakerAvatarInsideSession} src={element.linkToImg} alt=\"\" />\r\n              </p>\r\n\r\n              <p className={classes.speakerNameInsideSession}>{element.firstName}</p>\r\n              <p className={classes.speakerNameInsideSession}>\r\n                {capitalizeFirstLetter(element.lastName)}\r\n              </p>\r\n              <p className={classes.textCenter}>\r\n                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                  <Rating\r\n                    id={String(element.id)}\r\n                    classes={{ iconEmpty: 'rateSmallDefault' }}\r\n                    className={classes.smallScoreStarImg}\r\n                    name={String(element.id)}\r\n                    disabled={checkIsWatched(element.id)}\r\n                    value={renderSpeakersRates(element)}\r\n                    readOnly={checkIsWatched(element.id)}\r\n                    onChange={(event, newValue: number | null) => {\r\n                      sendVoteForSpeaker(newValue, +element.id);\r\n                    }}\r\n                  />\r\n                </Box>\r\n\r\n              </p>\r\n\r\n              <Grid xs={8} lg={12} xl={10} item container className={classes.mxAuto} justify={element.hasSendContactsButton ? 'space-between' : 'center'}>\r\n                <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n\r\n                  <img\r\n                    className={checkIsWatched(element.id) ? `${classes.loadPDFImg} ${classes.disabledImg}`\r\n                      : `${classes.pointerImg} ${classes.loadPDFImg}`}\r\n                    src={checkIsWatched(element.id) ? PDFDisabled : PDF}\r\n                    onClick={() => window.open(`${element.linkToPresentation}`, '_blank')}\r\n                    alt=\"\"\r\n                  />\r\n\r\n                </Grid>\r\n\r\n                {\r\n                  element.linkToZoom ? (\r\n                    <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n\r\n                      <img\r\n                        src={checkIsWatched(element.id) ? ZoomDisabled : Zoom}\r\n                        className={\r\n                          checkIsWatched(element.id) ? `${classes.loadZoomImg} ${classes.disabledImg}`\r\n                            : `${classes.pointerImg} ${classes.loadZoomImg}`\r\n                        }\r\n                        onClick={() => window.open(`${element.linkToZoom}`, '_blank')}\r\n                        alt=\"\"\r\n                      />\r\n\r\n                    </Grid>\r\n                  ) : null\r\n                }\r\n\r\n                {\r\n                  element.hasSendContactsButton ? (\r\n                    <Grid lg={4} xs={4} className={classes.zoomPdfIconsItem} item>\r\n\r\n                      <img\r\n                        src={checkIsWatchedAndSent(element.id, 'src')}\r\n                        className={\r\n                          checkIsWatchedAndSent(element.id, 'className')\r\n                        }\r\n                        onClick={() => sendContacts(element.id)}\r\n                        alt=\"\"\r\n                      />\r\n\r\n                    </Grid>\r\n                  ) : null\r\n                }\r\n\r\n              </Grid>\r\n\r\n            </Grid>\r\n          </>\r\n        );\r\n      }\r\n    })\r\n  );\r\n\r\n  const renderSpeakers = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return renderMockedSessionSpeakers();\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return renderMockedSessionSpeakers();\r\n      }\r\n\r\n      if (props.currentSessionSpeakersInfo) {\r\n        return renderSessionSpeakers();\r\n      } else renderMockedSessionSpeakers();\r\n    } else renderMockedSessionSpeakers();\r\n  };\r\n\r\n  const renderModeratorImgSrc = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return noAvatar;\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return noAvatar;\r\n      }\r\n\r\n      if (currentModeratorInfo) {\r\n        return currentModeratorInfo.linkToImg;\r\n      } else return noAvatar;\r\n    } else return noAvatar;\r\n  };\r\n\r\n  const renderModeratorFullName = () => {\r\n    if (currentUserData) {\r\n      if (!currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return 'Имя Фамилия';\r\n      }\r\n\r\n      if (currentUserData.channelUserInfo.activeSession\r\n        && currentUserData.channelUserInfo.break) {\r\n        return 'Имя Фамилия';\r\n      }\r\n\r\n      if (currentModeratorInfo) {\r\n        return `${capitalizeFirstLetter(currentModeratorInfo.lastName)} ${currentModeratorInfo.firstName}`;\r\n      } else return 'Имя Фамилия';\r\n    } else return 'Имя Фамилия';\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      <Grid xs={12} item container className={classes.mainContainerBckg}>\r\n        {/* mobile */}\r\n        <Hidden only={['lg', 'xl', 'md']}>\r\n          <Grid justify=\"space-around\" item className={classes.moderatorContainerInfoBlock} container xs={12} lg={4} xl={4}>\r\n\r\n            <Grid item xs={4} sm={2} xl={3}>\r\n              <img className={classes.moderatorAvatarImg} width=\"100%\" src={renderModeratorImgSrc()} alt=\"\" />\r\n\r\n            </Grid>\r\n            <Grid className={classes.moderatorInfoBlock} item xs={6} sm={5} xl={8} lg={8}>\r\n\r\n              <p className={classes.moderatorHeaderText}>Модератор</p>\r\n              <p className={classes.moderatorFullName}>{renderModeratorFullName()}</p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid item xs={12} md={8} lg={8} xl={8}>\r\n          <p className={classes.speakersBlockHeader}>Спикеры сессии</p>\r\n        </Grid>\r\n        <Hidden smDown>\r\n          <Grid justify=\"space-between\" item className={classes.moderatorContainerInfoBlock} container xs={4} lg={4} xl={4}>\r\n\r\n            <Grid item xs={3} md={3} xl={3}>\r\n              <img width=\"100%\" src={renderModeratorImgSrc()} alt=\"\" />\r\n\r\n            </Grid>\r\n            <Grid className={classes.moderatorInfoBlock} item xs={8} xl={8} lg={8}>\r\n\r\n              <p className={classes.moderatorHeaderText}>Модератор</p>\r\n              <p className={classes.moderatorFullName}>{renderModeratorFullName()}</p>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid className={classes.sessionSpeakersBlock} container item xs={12}>\r\n\r\n          {\r\n            renderSpeakers()\r\n          }\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(SpeakersSessionInfoBlock);\r\n","C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\core\\api.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\containers\\ContentContainer\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\VideoPlayerMain\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SessionInfoBlock\\style.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\utils\\helpers\\capitalizeFirstLetter.helper.ts",[],"C:\\Users\\Griha\\mmlf-video-conference\\frontend\\src\\components\\SpeakersSessionInfoBlock\\style.ts",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":16,"column":8,"nodeType":"193","messageId":"194","endLine":16,"endColumn":17},{"ruleId":"191","severity":1,"message":"195","line":20,"column":18,"nodeType":"193","messageId":"194","endLine":20,"endColumn":27},{"ruleId":"191","severity":1,"message":"196","line":24,"column":20,"nodeType":"193","messageId":"194","endLine":24,"endColumn":31},{"ruleId":"191","severity":1,"message":"197","line":19,"column":3,"nodeType":"193","messageId":"194","endLine":19,"endColumn":14},{"ruleId":"191","severity":1,"message":"198","line":19,"column":16,"nodeType":"193","messageId":"194","endLine":19,"endColumn":22},{"ruleId":"191","severity":1,"message":"199","line":28,"column":11,"nodeType":"193","messageId":"194","endLine":28,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":33,"column":23,"nodeType":"202","messageId":"203","endLine":33,"endColumn":26,"suggestions":"204"},{"ruleId":"200","severity":1,"message":"201","line":98,"column":37,"nodeType":"202","messageId":"203","endLine":98,"endColumn":40,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":99,"column":34,"nodeType":"208","messageId":"209","endLine":99,"endColumn":38,"suggestions":"210"},{"ruleId":"200","severity":1,"message":"201","line":100,"column":19,"nodeType":"202","messageId":"203","endLine":100,"endColumn":22,"suggestions":"211"},{"ruleId":"200","severity":1,"message":"201","line":107,"column":48,"nodeType":"202","messageId":"203","endLine":107,"endColumn":51,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":108,"column":7,"nodeType":"215","messageId":"216","endLine":108,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":110,"column":37,"nodeType":"208","messageId":"209","endLine":110,"endColumn":41,"suggestions":"217"},{"ruleId":"200","severity":1,"message":"201","line":111,"column":19,"nodeType":"202","messageId":"203","endLine":111,"endColumn":22,"suggestions":"218"},{"ruleId":"200","severity":1,"message":"201","line":54,"column":23,"nodeType":"202","messageId":"203","endLine":54,"endColumn":26,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"201","line":256,"column":62,"nodeType":"202","messageId":"203","endLine":256,"endColumn":65,"suggestions":"220"},{"ruleId":"200","severity":1,"message":"201","line":272,"column":67,"nodeType":"202","messageId":"203","endLine":272,"endColumn":70,"suggestions":"221"},{"ruleId":"200","severity":1,"message":"201","line":339,"column":41,"nodeType":"202","messageId":"203","endLine":339,"endColumn":44,"suggestions":"222"},{"ruleId":"200","severity":1,"message":"201","line":10,"column":12,"nodeType":"202","messageId":"203","endLine":10,"endColumn":15,"suggestions":"223"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":12,"nodeType":"202","messageId":"203","endLine":13,"endColumn":15,"suggestions":"224"},{"ruleId":"200","severity":1,"message":"201","line":36,"column":12,"nodeType":"202","messageId":"203","endLine":36,"endColumn":15,"suggestions":"225"},{"ruleId":"200","severity":1,"message":"201","line":58,"column":12,"nodeType":"202","messageId":"203","endLine":58,"endColumn":15,"suggestions":"226"},{"ruleId":"200","severity":1,"message":"201","line":80,"column":12,"nodeType":"202","messageId":"203","endLine":80,"endColumn":15,"suggestions":"227"},{"ruleId":"200","severity":1,"message":"201","line":102,"column":12,"nodeType":"202","messageId":"203","endLine":102,"endColumn":15,"suggestions":"228"},{"ruleId":"200","severity":1,"message":"201","line":124,"column":12,"nodeType":"202","messageId":"203","endLine":124,"endColumn":15,"suggestions":"229"},{"ruleId":"200","severity":1,"message":"201","line":146,"column":12,"nodeType":"202","messageId":"203","endLine":146,"endColumn":15,"suggestions":"230"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":12,"nodeType":"202","messageId":"203","endLine":13,"endColumn":15,"suggestions":"231"},{"ruleId":"200","severity":1,"message":"201","line":35,"column":12,"nodeType":"202","messageId":"203","endLine":35,"endColumn":15,"suggestions":"232"},{"ruleId":"200","severity":1,"message":"201","line":56,"column":12,"nodeType":"202","messageId":"203","endLine":56,"endColumn":15,"suggestions":"233"},{"ruleId":"200","severity":1,"message":"201","line":77,"column":12,"nodeType":"202","messageId":"203","endLine":77,"endColumn":15,"suggestions":"234"},{"ruleId":"200","severity":1,"message":"201","line":12,"column":12,"nodeType":"202","messageId":"203","endLine":12,"endColumn":15,"suggestions":"235"},{"ruleId":"191","severity":1,"message":"236","line":2,"column":10,"nodeType":"193","messageId":"194","endLine":2,"endColumn":16},{"ruleId":"191","severity":1,"message":"237","line":2,"column":16,"nodeType":"193","messageId":"194","endLine":2,"endColumn":32},{"ruleId":"191","severity":1,"message":"238","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":7,"column":33,"nodeType":"202","messageId":"203","endLine":7,"endColumn":36,"suggestions":"239"},{"ruleId":"191","severity":1,"message":"240","line":8,"column":9,"nodeType":"193","messageId":"194","endLine":8,"endColumn":16},{"ruleId":"191","severity":1,"message":"241","line":10,"column":22,"nodeType":"193","messageId":"194","endLine":10,"endColumn":35},{"ruleId":"191","severity":1,"message":"242","line":11,"column":9,"nodeType":"193","messageId":"194","endLine":11,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":12,"column":19,"nodeType":"202","messageId":"203","endLine":12,"endColumn":22,"suggestions":"243"},{"ruleId":"200","severity":1,"message":"201","line":14,"column":25,"nodeType":"202","messageId":"203","endLine":14,"endColumn":28,"suggestions":"244"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":34,"nodeType":"202","messageId":"203","endLine":13,"endColumn":37,"suggestions":"245"},{"ruleId":"191","severity":1,"message":"246","line":19,"column":10,"nodeType":"193","messageId":"194","endLine":19,"endColumn":14},{"ruleId":"200","severity":1,"message":"201","line":150,"column":19,"nodeType":"202","messageId":"203","endLine":150,"endColumn":22,"suggestions":"247"},{"ruleId":"191","severity":1,"message":"248","line":5,"column":23,"nodeType":"193","messageId":"194","endLine":5,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":25,"column":42,"nodeType":"202","messageId":"203","endLine":25,"endColumn":45,"suggestions":"249"},{"ruleId":"200","severity":1,"message":"201","line":48,"column":19,"nodeType":"202","messageId":"203","endLine":48,"endColumn":22,"suggestions":"250"},"lines-around-directive",["251"],"no-spaced-func",["252"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'LoginPage' is defined but never used.","Identifier","unusedVar","'setIsAuth' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'useLocation' is defined but never used.","'Prompt' is defined but never used.","'Props' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["253","254"],["255","256"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["257"],["258","259"],["260","261"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["262"],["263","264"],["265","266"],["267","268"],["269","270"],["271","272"],["273","274"],["275","276"],["277","278"],["279","280"],["281","282"],["283","284"],["285","286"],["287","288"],["289","290"],["291","292"],["293","294"],["295","296"],["297","298"],"'Hidden' is defined but never used.","'CircularProgress' is defined but never used.","'createPortal' is defined but never used.",["299","300"],"'classes' is assigned a value but never used.","'setContentRef' is assigned a value but never used.","'mountNode' is assigned a value but never used.",["301","302"],["303","304"],["305","306"],"'rate' is assigned a value but never used.",["307","308"],"'useEffect' is defined but never used.",["309","310"],["311","312"],"padding-line-between-statements","func-call-spacing",{"messageId":"313","fix":"314","desc":"315"},{"messageId":"316","fix":"317","desc":"318"},{"messageId":"313","fix":"319","desc":"315"},{"messageId":"316","fix":"320","desc":"318"},{"messageId":"321","fix":"322","desc":"323"},{"messageId":"313","fix":"324","desc":"315"},{"messageId":"316","fix":"325","desc":"318"},{"messageId":"313","fix":"326","desc":"315"},{"messageId":"316","fix":"327","desc":"318"},{"messageId":"321","fix":"328","desc":"323"},{"messageId":"313","fix":"329","desc":"315"},{"messageId":"316","fix":"330","desc":"318"},{"messageId":"313","fix":"331","desc":"315"},{"messageId":"316","fix":"332","desc":"318"},{"messageId":"313","fix":"333","desc":"315"},{"messageId":"316","fix":"334","desc":"318"},{"messageId":"313","fix":"335","desc":"315"},{"messageId":"316","fix":"336","desc":"318"},{"messageId":"313","fix":"337","desc":"315"},{"messageId":"316","fix":"338","desc":"318"},{"messageId":"313","fix":"339","desc":"315"},{"messageId":"316","fix":"340","desc":"318"},{"messageId":"313","fix":"341","desc":"315"},{"messageId":"316","fix":"342","desc":"318"},{"messageId":"313","fix":"343","desc":"315"},{"messageId":"316","fix":"344","desc":"318"},{"messageId":"313","fix":"345","desc":"315"},{"messageId":"316","fix":"346","desc":"318"},{"messageId":"313","fix":"347","desc":"315"},{"messageId":"316","fix":"348","desc":"318"},{"messageId":"313","fix":"349","desc":"315"},{"messageId":"316","fix":"350","desc":"318"},{"messageId":"313","fix":"351","desc":"315"},{"messageId":"316","fix":"352","desc":"318"},{"messageId":"313","fix":"353","desc":"315"},{"messageId":"316","fix":"354","desc":"318"},{"messageId":"313","fix":"355","desc":"315"},{"messageId":"316","fix":"356","desc":"318"},{"messageId":"313","fix":"357","desc":"315"},{"messageId":"316","fix":"358","desc":"318"},{"messageId":"313","fix":"359","desc":"315"},{"messageId":"316","fix":"360","desc":"318"},{"messageId":"313","fix":"361","desc":"315"},{"messageId":"316","fix":"362","desc":"318"},{"messageId":"313","fix":"363","desc":"315"},{"messageId":"316","fix":"364","desc":"318"},{"messageId":"313","fix":"365","desc":"315"},{"messageId":"316","fix":"366","desc":"318"},{"messageId":"313","fix":"367","desc":"315"},{"messageId":"316","fix":"368","desc":"318"},{"messageId":"313","fix":"369","desc":"315"},{"messageId":"316","fix":"370","desc":"318"},{"messageId":"313","fix":"371","desc":"315"},{"messageId":"316","fix":"372","desc":"318"},{"messageId":"313","fix":"373","desc":"315"},{"messageId":"316","fix":"374","desc":"318"},{"messageId":"313","fix":"375","desc":"315"},{"messageId":"316","fix":"376","desc":"318"},{"messageId":"313","fix":"377","desc":"315"},{"messageId":"316","fix":"378","desc":"318"},"suggestUnknown",{"range":"379","text":"380"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"379","text":"381"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"382","text":"380"},{"range":"382","text":"381"},"suggestOptionalChain",{"range":"383","text":"384"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"385","text":"380"},{"range":"385","text":"381"},{"range":"386","text":"380"},{"range":"386","text":"381"},{"range":"387","text":"384"},{"range":"388","text":"380"},{"range":"388","text":"381"},{"range":"389","text":"380"},{"range":"389","text":"381"},{"range":"390","text":"380"},{"range":"390","text":"381"},{"range":"391","text":"380"},{"range":"391","text":"381"},{"range":"392","text":"380"},{"range":"392","text":"381"},{"range":"393","text":"380"},{"range":"393","text":"381"},{"range":"394","text":"380"},{"range":"394","text":"381"},{"range":"395","text":"380"},{"range":"395","text":"381"},{"range":"396","text":"380"},{"range":"396","text":"381"},{"range":"397","text":"380"},{"range":"397","text":"381"},{"range":"398","text":"380"},{"range":"398","text":"381"},{"range":"399","text":"380"},{"range":"399","text":"381"},{"range":"400","text":"380"},{"range":"400","text":"381"},{"range":"401","text":"380"},{"range":"401","text":"381"},{"range":"402","text":"380"},{"range":"402","text":"381"},{"range":"403","text":"380"},{"range":"403","text":"381"},{"range":"404","text":"380"},{"range":"404","text":"381"},{"range":"405","text":"380"},{"range":"405","text":"381"},{"range":"406","text":"380"},{"range":"406","text":"381"},{"range":"407","text":"380"},{"range":"407","text":"381"},{"range":"408","text":"380"},{"range":"408","text":"381"},{"range":"409","text":"380"},{"range":"409","text":"381"},{"range":"410","text":"380"},{"range":"410","text":"381"},{"range":"411","text":"380"},{"range":"411","text":"381"},{"range":"412","text":"380"},{"range":"412","text":"381"},[965,968],"unknown","never",[2867,2870],[2914,2915],"?",[2947,2950],[3205,3208],[3294,3295],[3342,3345],[1552,1555],[10109,10112],[10604,10607],[12843,12846],[222,225],[263,266],[754,757],[1261,1264],[1775,1778],[2301,2304],[2785,2788],[3273,3276],[361,364],[916,919],[1403,1406],[1855,1858],[255,258],[256,259],[407,410],[511,514],[536,539],[5034,5037],[1242,1245],[2057,2060]]